//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.manager;

import java.util.Collection;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.query.IConceptQuery;
import net.disy.eenvplus.tfes.core.api.query.IDescribeConceptQuery;
import net.disy.eenvplus.tfes.core.api.query.IRelativeQuery;
import net.disy.eenvplus.tfes.core.api.query.IResolveThesaurusQuery;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.query.ISynonymQuery;
import net.disy.eenvplus.tfes.core.api.query.ITopMostConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.IConceptDescription;
import net.disy.eenvplus.tfes.core.api.response.IRelative;
import net.disy.eenvplus.tfes.core.api.response.IResolveThesaurus;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.core.api.response.ISynonym;
import net.disy.eenvplus.tfes.core.api.response.ITopMostConcept;
import net.disy.eenvplus.tfes.core.api.response.IVisualizationNode;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.core.module.DescribeConceptModulesManager;
import net.disy.eenvplus.tfes.core.module.RelatedNeighbourhoodModulesManager;
import net.disy.eenvplus.tfes.core.module.RelativeModulesManager;
import net.disy.eenvplus.tfes.core.module.ResolveThesaurusModulesManager;
import net.disy.eenvplus.tfes.core.module.SuggestionModulesManager;
import net.disy.eenvplus.tfes.core.module.SynonymModulesManager;
import net.disy.eenvplus.tfes.core.module.TopMostConceptModulesManager;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

// NOT_PUBLISHED
@Service
public class ServiceManager implements IServiceManager {

  @Autowired
  private SuggestionModulesManager suggestionModulesManager;

  @Autowired
  private DescribeConceptModulesManager describeConceptModulesManager;

  @Autowired
  private ResolveThesaurusModulesManager resolveThesaurusModulesManager;

  @Autowired
  private RelativeModulesManager relativeModulesManager;

  @Autowired
  private RelatedNeighbourhoodModulesManager relatedNeighbourhoodModulesManager;

  @Autowired
  private SynonymModulesManager synonymModulesManager;

  @Autowired
  private TopMostConceptModulesManager topMostConceptModulesManager;

  @Override
  public List<ServiceModuleDescription> getSuggestionsDescriptions() {
    return suggestionModulesManager.getServiceModuleDescription();
  }

  @Override
  public Collection<ISuggestion> getSuggestions(ISuggestionQuery query) throws ServiceException {
    return suggestionModulesManager.getSuggestions(query);
  }

  @Override
  public List<ServiceModuleDescription> getResolveThesaurusDescriptions() {
    return resolveThesaurusModulesManager.getServiceModuleDescription();
  }

  @Override
  public IResolveThesaurus getResolveThesaurus(IResolveThesaurusQuery query)
      throws ServiceException {
    return resolveThesaurusModulesManager.getResolveThesaurus(query);
  }

  @Override
  public List<ServiceModuleDescription> getDescribeContextDescriptions() {
    return describeConceptModulesManager.getServiceModuleDescription();
  }

  @Override
  public IConceptDescription describeConcept(IDescribeConceptQuery query) throws ServiceException {
    return describeConceptModulesManager.getConceptDescription(query);
  }

  @Override
  public List<ServiceModuleDescription> getRelativesDescriptions() {
    return relativeModulesManager.getServiceModuleDescription();
  }

  @Override
  public Collection<IRelative> getRelatives(IRelativeQuery query) throws ServiceException {
    return relativeModulesManager.getRelative(query);
  }

  @Override
  public List<ServiceModuleDescription> getSynonymsDescriptions() {
    return synonymModulesManager.getServiceModuleDescription();
  }

  @Override
  public Collection<ISynonym> getSynonyms(ISynonymQuery query) throws ServiceException {
    return synonymModulesManager.getSynonym(query);
  }

  @Override
  public List<ServiceModuleDescription> getTopMostConceptDescriptions() {
    return topMostConceptModulesManager.getServiceModuleDescription();
  }

  @Override
  public Collection<ITopMostConcept> getTopMostConcepts(ITopMostConceptQuery query)
      throws ServiceException {
    return topMostConceptModulesManager.getTopMostConcepts(query);
  }

  @Override
  public List<ServiceModuleDescription> getRelativeNeighbourhoodDescriptions() {
    return relatedNeighbourhoodModulesManager.getServiceModuleDescription();
  }

  @Override
  public IVisualizationNode getRelativeNeighbourhood(IConceptQuery query) throws ServiceException {
    return relatedNeighbourhoodModulesManager.getRelativeNeighbourhood(query);
  }

}
