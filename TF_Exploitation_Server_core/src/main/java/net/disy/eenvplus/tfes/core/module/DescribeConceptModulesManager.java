//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.core.module;

import static net.disy.eenvplus.tfes.core.api.response.EmptyConceptDescription.EMPTY_CONCEPT;
import static net.disy.eenvplus.tfes.core.util.CollectionUtilities.first;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.Future;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.IDescriptionProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IDescribeConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.IConceptDescription;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

// NOT_PUBLISHED
@Service
public class DescribeConceptModulesManager
    extends
    AbstractModuleManager<IDescriptionProviderServiceModule, IDescribeConceptQuery, IConceptDescription> {

  @Autowired(required = false)
  List<IDescriptionProviderServiceModule> descriptionModules = new ArrayList<>();

  @Override
  protected List<IDescriptionProviderServiceModule> getServiceModules() {
    return descriptionModules;
  }

  @Override
  protected Callable<IConceptDescription> createCallable(
      IDescribeConceptQuery query,
      IDescriptionProviderServiceModule module) {
    return module.getDescribeConcept(query);
  }

  public IConceptDescription getConceptDescription(IDescribeConceptQuery query)
      throws ServiceException {
    Set<Future<IConceptDescription>> futures = submitQuery(query);
    Collection<IConceptDescription> results = retrieveResults(futures);
    return first(results, EMPTY_CONCEPT);
  }

}
