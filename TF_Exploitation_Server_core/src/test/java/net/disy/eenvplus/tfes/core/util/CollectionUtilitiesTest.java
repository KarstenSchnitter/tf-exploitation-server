package net.disy.eenvplus.tfes.core.util;

import static java.util.Arrays.asList;
import static java.util.Collections.emptyList;
import static net.disy.eenvplus.tfes.core.util.CollectionUtilities.first;
import static net.disy.eenvplus.tfes.core.util.CollectionUtilities.flatten;
import static net.disy.eenvplus.tfes.core.util.CollectionUtilities.limitResults;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.empty;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.startsWith;
import static org.junit.Assert.assertThat;

import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.List;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

@SuppressWarnings("nls")
public class CollectionUtilitiesTest {

  private static final List<Object> EMPTY_LIST_OF_OBJECT = Collections.<Object> emptyList();
  private static final List<String> TEST_LIST = asList("this", "that");

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  @Test
  public void flattenEmptyCollection() throws Exception {
    Collection<Object> result = flatten(Collections.<Collection<Object>> emptyList());
    assertThat(result, is(empty()));
  }

  @Test
  public void flattenCollectionOfEmptyCollection() throws Exception {
    Collection<Object> result = flatten(asList(EMPTY_LIST_OF_OBJECT));
    assertThat(result, is(empty()));
  }

  @Test
  public void flattenCollectionOfTwoEmptyCollections() throws Exception {
    Collection<Object> result = flatten(asList(EMPTY_LIST_OF_OBJECT, EMPTY_LIST_OF_OBJECT));
    assertThat(result, is(empty()));
  }

  @Test
  public void flattenCollectionOfSingleCollection() throws Exception {
    List<Object> list = asList(new Object(), new Object());
    Collection<Object> result = flatten(asList(list));
    assertThat(result, containsInAnyOrder(list.toArray()));
  }

  @Test
  public void flattenCollectionOfTwoCollections() throws Exception {
    Object thisItem = new Object();
    Object thatItem = new Object();
    List<Object> list1 = asList(thisItem, thatItem);
    Object otherItem = new Object();
    List<Object> list2 = asList(otherItem);
    Collection<Object> result = flatten(asList(list1, list2));
    assertThat(result, containsInAnyOrder(thisItem, thatItem, otherItem));
  }

  @Test
  public void limitToZeroDoesNotLimit() throws Exception {
    List<String> result = limitResults(TEST_LIST, 0);

    assertThat(result, is((equalTo(TEST_LIST))));
  }

  @Test
  public void limitWithNegativeCountThrowsException() throws Exception {
    thrown.expect(IllegalArgumentException.class);
    thrown.expectMessage(startsWith("Expected non negative max index, received -1"));
    List<String> result = limitResults(TEST_LIST, -1);

    assertThat(result, is((equalTo(TEST_LIST))));
  }

  @Test
  public void limitToOneDoesLimit() throws Exception {
    List<String> result = limitResults(TEST_LIST, 1);

    assertThat(result, contains(TEST_LIST.get(0)));
  }

  @Test
  public void limitToMoreThanListReturnsUnchanged() throws Exception {
    List<String> result = limitResults(TEST_LIST, 3);

    assertThat(result, is((equalTo(TEST_LIST))));
  }

  @Test
  public void limitToExactLengthReturnsUnchanged() throws Exception {
    List<String> result = limitResults(TEST_LIST, 2);

    assertThat(result, is((equalTo(TEST_LIST))));
  }

  @Test
  public void firstOfEmptyCollectionReturnsAlternative() throws Exception {
    Object alternative = new Object();

    Object result = first(emptyList(), alternative);

    assertThat(result, is(alternative));
  }

  @Test
  public void firstOfCollectionReturnsFirst() throws Exception {
    Object first = new Object();
    Object second = new Object();

    Object result = first(Arrays.asList(first, second), null);

    assertThat(result, is(first));
  }

}
