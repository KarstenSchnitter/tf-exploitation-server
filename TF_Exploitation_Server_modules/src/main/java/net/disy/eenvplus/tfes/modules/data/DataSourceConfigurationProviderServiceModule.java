//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.data;

import static com.hp.hpl.jena.graph.NodeFactory.createVariable;
import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LANGUAGE;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.SORT_PRIORITY;

import java.util.Collections;
import java.util.LinkedList;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.capabilities.IDataSourceConfiguration;
import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.IDataSourceConfigurationProviderServiceModule;
import net.disy.eenvplus.tfes.core.config.data.DataSourceConfiguration;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;
import net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder;

import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.sparql.syntax.Element;

// NOT_PUBLISHED
@Component
@Profile("prod")
public class DataSourceConfigurationProviderServiceModule
    implements
    IDataSourceConfigurationProviderServiceModule {

  private static final String SERVICE_ID = "Data Source Configuration Extraction Module"; //$NON-NLS-1$

  @Autowired
  private ISparqlConnector sparqlConnector;

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Collections.emptyList();
    return new ServiceModuleDescription(SERVICE_ID, parameterDescriptions);
  }

  @Override
  public List<IDataSourceConfiguration> getConfigurations() {
    try {
      ResultSet result = sparqlConnector.executeSparqlQuery(createQuery());
      return map(result);
    }
    catch (ServiceException e) {
      LoggerFactory.getLogger(getClass()).warn("Error determining Thesauri."); //$NON-NLS-1$
    }
    return Collections.emptyList();
  }

  private Query createQuery() {
    Query query = QueryFactory.create();
    query.setQuerySelectType();
    query.setDistinct(true);
    query.addResultVar(CONCEPT_SCHEME.getName());
    query.addResultVar(LANGUAGE.getName());
    query.addResultVar(LABEL.getName());
    query.addResultVar(SORT_PRIORITY.getName());
    query.setQueryPattern(createBody());
    return query;
  }

  private Element createBody() {
    return ElementGroupBuilder
        .createGroup()
        .add(Triple.create(CONCEPT_SCHEME.createVariableNode(), createVariable("a"), //$NON-NLS-1$
            CONCEPT_SCHEME.createUriNode()))
        .add(
            Triple.create(
                CONCEPT_SCHEME.createVariableNode(),
                LABEL.createUriNode(),
                LABEL.createVariableNode()))
        .add(
            Triple.create(
                CONCEPT_SCHEME.createVariableNode(),
                LANGUAGE.createUriNode(),
                LANGUAGE.createVariableNode()))
        .add(
            Triple.create(
                CONCEPT_SCHEME.createVariableNode(),
                SORT_PRIORITY.createUriNode(),
                SORT_PRIORITY.createVariableNode()))
        .build();
  }

  private List<IDataSourceConfiguration> map(ResultSet result) {
    List<IDataSourceConfiguration> sources = new LinkedList<>();
    while (result.hasNext()) {
      QuerySolution current = result.next();
      sources.add(map(current));
    }
    return sources;
  }

  private IDataSourceConfiguration map(QuerySolution current) {
    DataSourceConfiguration result = new DataSourceConfiguration();
    result.setName(current.getLiteral(LABEL.getName()).getString());
    result.setOnlineResource(current.get(CONCEPT_SCHEME.getName()).asResource().getURI());
    result.setLanguages(asList(current.getLiteral(LANGUAGE.getName()).getString()));
    result.setRank(current.getLiteral(SORT_PRIORITY.getName()).getDouble());
    return result;
  }

  @Override
  public String getSparqlEndpointUrl() {
    return sparqlConnector.getEndpointUrl();
  }
}
