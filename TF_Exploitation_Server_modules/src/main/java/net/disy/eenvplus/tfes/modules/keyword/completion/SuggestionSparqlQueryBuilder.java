//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.completion;

import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createConceptLabelUnion;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSchemeTriple;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSourceTriple;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLowerCaseExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;

// NOT_PUBLISHED
public class SuggestionSparqlQueryBuilder
    extends
    AbstractQueryBuilder<SuggestionSparqlQueryBuilder> {

  private String keyword;
  private String sourceLabel;
  private boolean sourceActive;

  private SuggestionSparqlQueryBuilder(String keyword, String sourceLabel) {
    this.keyword = keyword;
    this.sourceLabel = sourceLabel;
  }

  public static SuggestionSparqlQueryBuilder createSuggestionQuery(
      String keyword,
      String sourceLabel) {
    return new SuggestionSparqlQueryBuilder(keyword, sourceLabel);
  }

  public SuggestionSparqlQueryBuilder withSource(boolean sourceActive) {
    this.sourceActive = sourceActive;
    return getThis();
  }

  @Override
  protected SuggestionSparqlQueryBuilder getThis() {
    return this;
  }

  @Override
  protected Element createBody() {
    return createGroup()
        .add(createConceptLabelUnion(CONCEPT.createVar(), LABEL.createVar()))
        .add(createSchemeTriple(CONCEPT, IN_SCHEME))
        .addOptional(createSourceTriple(IN_SCHEME, sourceLabel), sourceActive)
        .add(createFilter())
        .build();
  }

  private ElementFilter createFilter() {
    return use(new SparqlLowerCaseExpression(LABEL.createExprVar()).create(keyword))
        .and(
            createMultipleOptionsExpression(new SparqlLanguageExpression(LABEL), getLanguages()),
            !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(IN_SCHEME), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(LABEL)
        .addResultVariable(CONCEPT)
        .addResultVariable(sourceLabel, sourceActive);
  }

}
