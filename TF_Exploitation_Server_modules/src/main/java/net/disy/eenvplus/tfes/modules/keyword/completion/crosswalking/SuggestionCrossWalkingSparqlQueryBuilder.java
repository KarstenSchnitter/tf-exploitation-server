//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.completion.crosswalking;

import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.EXACT_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.SORT_PRIORITY;
import net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder;
import net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLowerCaseExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;

// NOT_PUBLISHED
public class SuggestionCrossWalkingSparqlQueryBuilder
    extends
    AbstractQueryBuilder<SuggestionCrossWalkingSparqlQueryBuilder> {

  private String keyword;
  private String sourceLabel;
  private boolean sourceActive;

  private SuggestionCrossWalkingSparqlQueryBuilder(String keyword, String sourceLabel) {
    this.keyword = keyword;
    this.sourceLabel = sourceLabel;
  }

  public static SuggestionCrossWalkingSparqlQueryBuilder createQuery(
      String keyword,
      String sourceLabel) {
    return new SuggestionCrossWalkingSparqlQueryBuilder(keyword, sourceLabel);
  }

  public SuggestionCrossWalkingSparqlQueryBuilder withSource(boolean sourceActive) {
    this.sourceActive = sourceActive;
    return getThis();
  }

  @Override
  protected SuggestionCrossWalkingSparqlQueryBuilder getThis() {
    return this;
  }

  @Override
  protected Element createBody() {
    Element labels = SparqlElementFactory.createConceptLabelUnion(
        CONCEPT.createVar(),
        LABEL.createVar());
    Triple schema = SparqlElementFactory.createSchemeTriple(CONCEPT, IN_SCHEME);
    Triple source = SparqlElementFactory.createSourceTriple(IN_SCHEME, sourceLabel);
    Triple matches = Triple.create(
        CONCEPT.createVariableNode(),
        EXACT_MATCH.createUriNode(),
        EXACT_MATCH.createVariableNode());
    Triple rank = Triple.create(
        IN_SCHEME.createVariableNode(),
        SORT_PRIORITY.createUriNode(),
        SORT_PRIORITY.createVariableNode());
    ElementFilter filter = createFilter();

    return ElementGroupBuilder
        .createGroup()
        .add(labels)
        .add(schema)
        .add(rank)
        .addOptional(matches)
        .addOptional(source, sourceActive)
        .add(filter)
        .build();
  }

  private ElementFilter createFilter() {
    return use(new SparqlLowerCaseExpression(LABEL.createExprVar()).create(keyword))
        .and(
            createMultipleOptionsExpression(new SparqlLanguageExpression(LABEL), getLanguages()),
            !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(IN_SCHEME), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(LABEL)
        .addResultVariable(CONCEPT)
        .addResultVariable(EXACT_MATCH)
        .addResultVariable(SORT_PRIORITY)
        .addResultVariable(sourceLabel, sourceActive);
  }

}
