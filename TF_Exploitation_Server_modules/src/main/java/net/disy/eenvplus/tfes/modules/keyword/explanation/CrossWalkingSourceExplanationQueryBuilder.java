//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.explanation;

import static com.hp.hpl.jena.sparql.expr.NodeValue.TRUE;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createExactMatchUnion;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSchemeTriple;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSourceTriple;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createIsLiteralExpression;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.BROADER;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.BROAD_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.EXACT_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.NARROWER;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.NARROW_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.RELATED;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.RELATED_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder.createSelectQuery;
import net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder;
import net.disy.eenvplus.tfes.modules.sparql.element.ElementUnionBuilder;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;
import com.hp.hpl.jena.sparql.syntax.ElementSubQuery;
import com.hp.hpl.jena.sparql.syntax.ElementUnion;

// NOT_PUBLISHED

public class CrossWalkingSourceExplanationQueryBuilder
    extends
    AbstractExplanationQueryBuilder<CrossWalkingSourceExplanationQueryBuilder> {

  private CrossWalkingSourceExplanationQueryBuilder(String concept) {
    super(concept);
  }

  public static CrossWalkingSourceExplanationQueryBuilder createConceptQuery(String concept) {
    return new CrossWalkingSourceExplanationQueryBuilder(concept);
  }

  @Override
  protected CrossWalkingSourceExplanationQueryBuilder getThis() {
    return this;
  }

  @Override
  protected Element createBody() {
    ElementUnion union = ElementUnionBuilder
        .createUnion()
        .add(createDirectElement())
        .add(createExactMatchElement())
        .add(createRelatedMatchElement(BROADER, BROAD_MATCH))
        .add(createRelatedMatchElement(RELATED, RELATED_MATCH))
        .add(createRelatedMatchElement(NARROWER, NARROW_MATCH))
        .build();
    return createGroup().add(union).add(createFilter()).build();
  }

  private Element createDirectElement() {
    return createGroup()
        .add(Triple.create(getConceptUriNode(), PREDICATE, OBJECT))
        .add(createSchemeTriple(getConceptUriNode(), IN_SCHEME))
        .add(createSourceTriple(IN_SCHEME, SOURCE.getName()))
        .build();
  }

  private Element createExactMatchElement() {
    return ElementGroupBuilder
        .createGroup()
        .add(createExactMatchUnion(getConceptUriNode(), EXACT_MATCH.createVariableNode()))
        .add(Triple.create(EXACT_MATCH.createVar(), PREDICATE, OBJECT))
        .add(createSchemeTriple(EXACT_MATCH, IN_SCHEME))
        .add(createSourceTriple(IN_SCHEME, SOURCE.getName()))
        .addAsFilter(createIsLiteralExpression(OBJECT))
        .build();
  }

  private Element createRelatedMatchElement(SparqlNodes relation, SparqlNodes match) {
    Element body = ElementGroupBuilder
        .createGroup()
        .add(createExactMatchUnion(getConceptUriNode(), EXACT_MATCH.createVariableNode()))
        .add(Triple.create(EXACT_MATCH.createVariableNode(), relation.createUriNode(), OBJECT))
        .add(createSchemeTriple(OBJECT, IN_SCHEME))
        .add(createSourceTriple(IN_SCHEME, SOURCE.getName()))
        .build();
    Query subQuery = createSelectQuery()
        .addResultVariable(CONCEPT.getName(), getConceptUriExpr())
        .addResultVariable(PREDICATE.getName(), match.createUriValueNode())
        .addResultVariable(OBJECT)
        .addResultVariable(SOURCE)
        .withBody(body)
        .getQuery();
    return new ElementSubQuery(subQuery);
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(CONCEPT.getName(), getConceptUriExpr())
        .addResultVariable(PREDICATE)
        .addResultVariable(OBJECT)
        .addResultVariable(SOURCE);
  }

  private ElementFilter createFilter() {
    return use(TRUE)
        .and(createNoLiteralOrLanguageExpression(), !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(IN_SCHEME), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

}
