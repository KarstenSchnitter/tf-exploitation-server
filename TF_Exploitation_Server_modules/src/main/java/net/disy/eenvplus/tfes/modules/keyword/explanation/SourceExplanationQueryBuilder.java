//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.explanation;

import static com.hp.hpl.jena.graph.NodeFactory.createURI;
import static com.hp.hpl.jena.sparql.expr.NodeValue.TRUE;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSchemeTriple;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSourceTriple;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;

// NOT_PUBLISHED

public class SourceExplanationQueryBuilder
    extends
    AbstractExplanationQueryBuilder<SourceExplanationQueryBuilder> {

  private SourceExplanationQueryBuilder(String concept) {
    super(concept);
  }

  public static SourceExplanationQueryBuilder createConceptQuery(String concept) {
    return new SourceExplanationQueryBuilder(concept);
  }

  @Override
  protected SourceExplanationQueryBuilder getThis() {
    return this;
  }

  @Override
  protected Element createBody() {
    return createGroup()
        .add(Triple.create(getConceptUriNode(), PREDICATE, OBJECT))
        .add(createSchemeTriple(getConceptUriNode(), IN_SCHEME))
        .add(createSourceTriple(IN_SCHEME, SOURCE.getName()))
        .add(createFilter())
        .build();
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(CONCEPT.getName(), new NodeValueNode(createURI(getConceptUri())))
        .addResultVariable(PREDICATE)
        .addResultVariable(OBJECT)
        .addResultVariable(SOURCE);
  }

  private ElementFilter createFilter() {
    return use(TRUE)
        .and(createNoLiteralOrLanguageExpression(), !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(IN_SCHEME), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

}
