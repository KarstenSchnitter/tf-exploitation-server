//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.translation;

import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;
import com.hp.hpl.jena.sparql.syntax.ElementUnion;

// NOT_PUBLISHED

public class SynonymsQueryBuilder extends AbstractQueryBuilder<SynonymsQueryBuilder> {

  private String concept;
  private boolean sourceActive;
  private String sourceLabel;

  private SynonymsQueryBuilder(String concept, String sourceLabel) {
    this.concept = concept;
    this.sourceLabel = sourceLabel;
  }

  public static SynonymsQueryBuilder createSynonymsQuery(String concept, String sourceLabel) {
    return new SynonymsQueryBuilder(concept, sourceLabel);
  }

  public SynonymsQueryBuilder withSource(boolean sourceActive) {
    this.sourceActive = sourceActive;
    return getThis();
  }

  @Override
  protected SynonymsQueryBuilder getThis() {
    return this;
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(CONCEPT.getName())
        .addResultVariable(LABEL.getName())
        .addResultVariable(sourceLabel, sourceActive);
  }

  @Override
  protected Element createBody() {
    ElementUnion labels = SparqlElementFactory.createConceptLabelUnion(
        CONCEPT.createVar(),
        LABEL.createVar());
    Triple scheme = SparqlElementFactory.createSchemeTriple(CONCEPT, IN_SCHEME);
    Triple source = SparqlElementFactory.createSourceTriple(IN_SCHEME, sourceLabel);
    ElementFilter filter = createFilter(LABEL, IN_SCHEME);
    return createGroup()
        .add(labels)
        .add(scheme)
        .addOptional(source, sourceActive)
        .add(filter)
        .build();
  }

  private ElementFilter createFilter(SparqlNodes label, SparqlNodes scheme) {
    return use(new SparqlUriExpression(CONCEPT).create(concept))
        .and(
            createMultipleOptionsExpression(new SparqlLanguageExpression(label), getLanguages()),
            !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(scheme), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

}
