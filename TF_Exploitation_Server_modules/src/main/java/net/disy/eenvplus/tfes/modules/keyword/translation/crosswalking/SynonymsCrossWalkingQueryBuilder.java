//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.keyword.translation.crosswalking;

import static com.hp.hpl.jena.graph.NodeFactory.createVariable;
import static com.hp.hpl.jena.graph.Triple.create;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.expr.ExprVar;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;
import com.hp.hpl.jena.sparql.syntax.ElementGroup;
import com.hp.hpl.jena.sparql.syntax.ElementUnion;

// NOT_PUBLISHED

public class SynonymsCrossWalkingQueryBuilder
    extends
    AbstractQueryBuilder<SynonymsCrossWalkingQueryBuilder> {

  private static final String QUERIED_CONCEPT = "queried"; //$NON-NLS-1$

  private String concept;
  private String sourceLabel;
  private boolean sourceActive;

  private SynonymsCrossWalkingQueryBuilder(String concept, String sourceLabel) {
    this.concept = concept;
    this.sourceLabel = sourceLabel;
  }

  public SynonymsCrossWalkingQueryBuilder withSource(boolean sourceActive) {
    this.sourceActive = sourceActive;
    return getThis();
  }

  @Override
  protected SynonymsCrossWalkingQueryBuilder getThis() {
    return this;
  }

  public static SynonymsCrossWalkingQueryBuilder createSynonymsQuery(
      String concept,
      String sourceLabel) {
    return new SynonymsCrossWalkingQueryBuilder(concept, sourceLabel);
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(CONCEPT.getName())
        .addResultVariable(LABEL.getName())
        .addResultVariable(sourceLabel, sourceActive);
  }

  @Override
  protected Element createBody() {
    ElementUnion labels = SparqlElementFactory.createConceptLabelUnion(
        CONCEPT.createVar(),
        LABEL.createVar());
    Triple scheme = createSchemeTriple(CONCEPT, IN_SCHEME);
    ElementGroup labelsAndScheme = createGroup().add(labels).add(scheme).build();
    ElementUnion exactMatches = SparqlElementFactory.createExactMatchUnion(
        CONCEPT.createVar(),
        createVariable(QUERIED_CONCEPT));
    Triple source = SparqlElementFactory.createSourceTriple(IN_SCHEME, sourceLabel);
    ElementFilter filter = createFilter(LABEL, IN_SCHEME);
    return createGroup()
        .add(labelsAndScheme)
        .add(exactMatches)
        .addOptional(source, sourceActive)
        .add(filter)
        .build();
  }

  private Triple createSchemeTriple(SparqlNodes concept, SparqlNodes scheme) {
    return create(concept.createVar(), scheme.createUriNode(), scheme.createVar());
  }

  private ElementFilter createFilter(SparqlNodes label, SparqlNodes scheme) {
    return use(new SparqlUriExpression(new ExprVar(QUERIED_CONCEPT)).create(concept))//
        .and(
            createMultipleOptionsExpression(new SparqlLanguageExpression(label), getLanguages()),
            !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(scheme), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

}
