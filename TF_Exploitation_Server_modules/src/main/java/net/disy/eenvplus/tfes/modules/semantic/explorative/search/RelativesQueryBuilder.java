//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.explorative.search;

import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.RELATION;

import java.util.List;

import net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.NodeFactory;
import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;
import com.hp.hpl.jena.sparql.syntax.ElementUnion;

// NOT_PUBLISHED

public class RelativesQueryBuilder extends AbstractQueryBuilder<RelativesQueryBuilder> {

  private final static Node QUERIED_CONCEPT = NodeFactory.createVariable("queried"); //$NON-NLS-1$

  private String concept;
  private boolean sourceActive;
  private String sourceLabel;

  private RelativesQueryBuilder(String concept, String sourceLabel) {
    this.concept = concept;
    this.sourceLabel = sourceLabel;
  }

  public static RelativesQueryBuilder createRelativesQuery(String concept, String sourceLabel) {
    return new RelativesQueryBuilder(concept, sourceLabel);
  }

  public RelativesQueryBuilder withSource(boolean sourceActive) {
    this.sourceActive = sourceActive;
    return getThis();
  }

  @Override
  protected RelativesQueryBuilder getThis() {
    return this;
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(CONCEPT.getName())
        .addResultVariable(LABEL.getName())
        .addResultVariable(RELATION.getName())
        .addResultVariable(sourceLabel, sourceActive);
  }

  @Override
  protected Element createBody() {
    Triple relations = Triple.create(
        QUERIED_CONCEPT,
        RELATION.createVariableNode(),
        CONCEPT.createVariableNode());
    ElementUnion label = SparqlElementFactory.createConceptLabelUnion(
        CONCEPT.createVar(),
        LABEL.createVar());
    Triple scheme = SparqlElementFactory.createSchemeTriple(CONCEPT, IN_SCHEME);
    Triple source = SparqlElementFactory.createSourceTriple(IN_SCHEME, sourceLabel);
    return createGroup()
        .add(relations)
        .add(label)
        .add(scheme)
        .addOptional(source, sourceActive)
        .add(createFilter(LABEL, IN_SCHEME, RELATION))
        .build();
  }

  private ElementFilter createFilter(SparqlNodes label, SparqlNodes scheme, SparqlNodes relation) {
    List<String> relationUris = SparqlNodes.getRelationUris();
    return use(new SparqlUriExpression(QUERIED_CONCEPT).create(concept))
        .and(
            createMultipleOptionsExpression(new SparqlLanguageExpression(label), getLanguages()),
            !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(scheme), getSchemas()),
            !getSchemas().isEmpty())
        .and(createMultipleOptionsExpression(new SparqlUriExpression(relation), relationUris))
        .toElementFilter();
  }

}
