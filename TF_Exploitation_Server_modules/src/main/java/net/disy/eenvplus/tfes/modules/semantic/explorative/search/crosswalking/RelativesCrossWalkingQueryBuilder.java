//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.explorative.search.crosswalking;

import static com.hp.hpl.jena.sparql.expr.NodeValue.TRUE;
import static net.disy.eenvplus.tfes.modules.semantic.explorative.search.crosswalking.RelationMatchQueryBuilder.createRelationQuery;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createConceptLabelUnion;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSchemeTriple;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSourceTriple;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder.use;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.BROADER;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.BROAD_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.NARROWER;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.NARROW_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.RELATED;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.RELATED_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.RELATION;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementFilter;
import com.hp.hpl.jena.sparql.syntax.ElementSubQuery;
import com.hp.hpl.jena.sparql.syntax.ElementUnion;

// NOT_PUBLISHED

public class RelativesCrossWalkingQueryBuilder
    extends
    AbstractQueryBuilder<RelativesCrossWalkingQueryBuilder> {

  private String concept;
  private String sourceLabel;
  private boolean sourceActive;

  private RelativesCrossWalkingQueryBuilder(String concept, String sourceLabel) {
    this.concept = concept;
    this.sourceLabel = sourceLabel;
  }

  public static RelativesCrossWalkingQueryBuilder createRelativesQuery(
      String concept,
      String sourceLabel) {
    return new RelativesCrossWalkingQueryBuilder(concept, sourceLabel);
  }

  public RelativesCrossWalkingQueryBuilder withSource(boolean sourceActive) {
    this.sourceActive = sourceActive;
    return getThis();
  }

  @Override
  protected RelativesCrossWalkingQueryBuilder getThis() {
    return this;
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    return builder
        .addResultVariable(CONCEPT.getName())
        .addResultVariable(LABEL.getName())
        .addResultVariable(RELATION.getName())
        .addResultVariable(sourceLabel, sourceActive);
  }

  @Override
  protected Element createBody() {
    return createGroup()
        .add(createRelations())
        .add(createConceptLabelUnion(CONCEPT.createVar(), LABEL.createVar()))
        .add(createSchemeTriple(CONCEPT, IN_SCHEME))
        .addOptional(createSourceTriple(IN_SCHEME, sourceLabel), sourceActive)
        .add(createFilter(LABEL, IN_SCHEME))
        .build();
  }

  private ElementUnion createRelations() {
    ElementUnion relations = new ElementUnion();
    relations.addElement(createSubQuery(BROADER, BROAD_MATCH));
    relations.addElement(createSubQuery(RELATED, RELATED_MATCH));
    relations.addElement(createSubQuery(NARROWER, NARROW_MATCH));
    return relations;
  }

  private ElementSubQuery createSubQuery(SparqlNodes relation, SparqlNodes match) {
    Query subQuery = createRelationQuery(concept, RELATION.getName(), CONCEPT.getName())
        .withRelation(relation)
        .withMatch(match)
        .createQuery();
    return new ElementSubQuery(subQuery);
  }

  private ElementFilter createFilter(SparqlNodes label, SparqlNodes scheme) {
    return use(TRUE)
        .and(
            createMultipleOptionsExpression(new SparqlLanguageExpression(label), getLanguages()),
            !getLanguages().isEmpty())
        .and(
            createMultipleOptionsExpression(new SparqlUriExpression(scheme), getSchemas()),
            !getSchemas().isEmpty())
        .toElementFilter();
  }

}
