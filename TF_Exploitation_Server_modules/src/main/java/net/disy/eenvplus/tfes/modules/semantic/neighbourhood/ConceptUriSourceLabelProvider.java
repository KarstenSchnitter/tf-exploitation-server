//Copyright (c) 2015 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.neighbourhood;

import static com.hp.hpl.jena.graph.NodeFactory.createURI;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSchemeTriple;
import static net.disy.eenvplus.tfes.modules.sparql.element.SparqlElementFactory.createSourceTriple;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder.createSelectDistinctQuery;
import static org.apache.commons.lang3.StringUtils.EMPTY;

import java.util.concurrent.ConcurrentHashMap;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;
import net.disy.eenvplus.tfes.modules.sparql.result.ISourceLabelProvider;
import net.disy.eenvplus.tfes.modules.sparql.result.QuerySolutionItemExtractors;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.NodeFactory;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.sparql.syntax.Element;

// NOT_PUBLISHED
@Service
public class ConceptUriSourceLabelProvider implements ISourceLabelProvider {

  private static final String LABEL = "label"; //$NON-NLS-1$

  private static final Logger LOGGER = LoggerFactory.getLogger(ConceptUriSourceLabelProvider.class);

  @Autowired
  private ISparqlConnector sparqlConnector;

  private ConcurrentHashMap<String, String> labels = new ConcurrentHashMap<>();

  @Override
  public String provideFor(String uri) {
    if (StringUtils.isBlank(uri)) {
      return null;
    }
    String key = extractSourceKey(uri);
    if (labels.get(key) == null) {
      return retrieveLabel(uri);
    }
    return labels.get(key);
  }

  private String retrieveLabel(String uri) {
    Query query = createQuery(uri);
    String result = EMPTY;
    try {
      ResultSet resultSet = sparqlConnector.executeSparqlQuery(query);
      if (resultSet.hasNext()) {
        result = QuerySolutionItemExtractors.getLabel(LABEL, resultSet.next());
      }
      labels.putIfAbsent(extractSourceKey(uri), result);
      LOGGER.debug("Added to source label cache: " + extractSourceKey(uri) + " -> " + result); //$NON-NLS-1$//$NON-NLS-2$
    }
    catch (ServiceException logged) {
      LOGGER.warn("Cannot retrieve source label for concept " + uri, logged); //$NON-NLS-1$
    }
    return result;

  }

  private Query createQuery(String uri) {
    Node label = NodeFactory.createVariable(LABEL);
    Element body = createGroup()
        .add(createSchemeTriple(createURI(uri), IN_SCHEME))
        .add(createSourceTriple(IN_SCHEME, label))
        .build();
    return createSelectDistinctQuery().addResultVariable(label).withBody(body).getQuery();
  }

  private String extractSourceKey(String uri) {
    return uri.substring(0, uri.lastIndexOf('/'));
  }

}
