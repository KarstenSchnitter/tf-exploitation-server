//Copyright (c) 2015 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.neighbourhood;

import static net.disy.eenvplus.tfes.core.api.query.QueryParameterKeys.QUERY_DEPTH;
import static net.disy.eenvplus.tfes.core.api.query.QueryParameterKeys.RELATIONS;
import static net.disy.eenvplus.tfes.modules.semantic.neighbourhood.RelativeNeighbourhoodQueryBuilder.createRelativeNeighbourhoodQuery;

import java.util.Arrays;
import java.util.List;
import java.util.concurrent.Callable;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.modules.IRelativeNeighbourhoodProviderServiceModule;
import net.disy.eenvplus.tfes.core.api.query.IConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.IVisualizationNode;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.springframework.beans.factory.annotation.Autowired;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED
public class RelativeNeighbourhoodModule implements IRelativeNeighbourhoodProviderServiceModule {

  private static final String SERVICE_ID = "Relative Neighbourhood Module"; //$NON-NLS-1$
  private static final ParameterDescription DEPTH_PARAMETER = new ParameterDescription(
      QUERY_DEPTH.getKey(),
      "integer", 3); //$NON-NLS-1$
  private static final ParameterDescription RELATIONS_PARAMETER = new ParameterDescription(
      RELATIONS.getKey(),
      "string", ""); //$NON-NLS-1$ //$NON-NLS-2$

  @Autowired
  private ISparqlConnector sparqlConnector;

  @Autowired
  private RelativeNeighbourhoodResultSetMapper resultMapper;

  @Override
  public ServiceModuleDescription getDescription() {
    List<ParameterDescription> parameterDescriptions = Arrays.asList(
        DEPTH_PARAMETER,
        RELATIONS_PARAMETER);
    return new ServiceModuleDescription(SERVICE_ID, parameterDescriptions);
  }

  @Override
  public Callable<IVisualizationNode> getNeighbourhood(final IConceptQuery query) {

    return new Callable<IVisualizationNode>() {

      @Override
      public IVisualizationNode call() throws ServiceException {
        Query jenaQuery = createRelativeNeighbourhoodQuery(query.getConcept())
            .withLanguages(query.getLanguages())
            .withRelations(getRelations(query))
            .withDepth(getDepth(query))
            .build();
        ResultSet resultSet = sparqlConnector.executeSparqlQuery(jenaQuery);
        return resultMapper.map(resultSet, getDepth(query));
      }

      @SuppressWarnings("unchecked")
      private List<String> getRelations(IConceptQuery query) {
        return (List<String>) query.getExtraParameters().get(RELATIONS.getKey());
      }

      private Integer getDepth(final IConceptQuery query) {
        return (Integer) query.getExtraParameters().get(QUERY_DEPTH.getKey());
      }
    };
  }
}
