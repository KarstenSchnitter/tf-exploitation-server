//Copyright (c) 2015 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.neighbourhood;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder.createGroup;
import static net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionFactory.createMultipleOptionsExpression;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.exceptions.UnknownRelationException;
import net.disy.eenvplus.tfes.modules.sparql.element.ElementGroupBuilder;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlExpressionBuilder;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlLanguageExpression;
import net.disy.eenvplus.tfes.modules.sparql.expression.SparqlUriExpression;
import net.disy.eenvplus.tfes.modules.sparql.query.AbstractQueryBuilder;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlQueryBuilder;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.NodeFactory;
import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.expr.E_NotEquals;
import com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;
import com.hp.hpl.jena.sparql.syntax.Element;
import com.hp.hpl.jena.sparql.syntax.ElementGroup;

// NOT_PUBLISHED
public class RelativeNeighbourhoodQueryBuilder
    extends
    AbstractQueryBuilder<RelativeNeighbourhoodQueryBuilder> {

  private static final int DEFAULT_DEPTH = 3;
  private static final List<SparqlNodes> ALL_RELATIONS = asList(
      SparqlNodes.RELATED,
      SparqlNodes.BROADER,
      SparqlNodes.NARROWER,
      SparqlNodes.EXACT_MATCH,
      SparqlNodes.CLOSE_MATCH);

  private Node rootNode;
  private int depth = DEFAULT_DEPTH;
  private Collection<SparqlNodes> relations = ALL_RELATIONS;

  private RelativeNeighbourhoodQueryBuilder(String rootConcept) {
    this.rootNode = NodeFactory.createURI(rootConcept);
  }

  public static RelativeNeighbourhoodQueryBuilder createRelativeNeighbourhoodQuery(
      String rootConcept) {
    return new RelativeNeighbourhoodQueryBuilder(rootConcept);
  }

  public RelativeNeighbourhoodQueryBuilder withDepth(int depth) {
    this.depth = depth;
    return this;
  }

  public RelativeNeighbourhoodQueryBuilder withRelations(List<String> relations)
      throws UnknownRelationException {
    if (relations == null || relations.isEmpty()) {
      return this;
    }
    this.relations = new ArrayList<>(relations.size());
    for (String current : relations) {
      SparqlNodes node = getNode(current);
      this.relations.add(node);
    }
    return this;
  }

  private SparqlNodes getNode(String current) throws UnknownRelationException {
    SparqlNodes node = SparqlNodes.parseName(current);
    if (node == null) {
      throw new UnknownRelationException(current);
    }
    return node;
  }

  @Override
  protected RelativeNeighbourhoodQueryBuilder getThis() {
    return this;
  }

  @Override
  protected Element createBody() {
    ElementGroupBuilder groupBuilder = ElementGroupBuilder.createGroup();
    groupBuilder = addRootTriple(groupBuilder);
    if (depth > 0) {
      groupBuilder = addDeeperLevelTriples(groupBuilder);
    }
    return groupBuilder.build();
  }

  private ElementGroupBuilder addRootTriple(ElementGroupBuilder groupBuilder) {
    Triple rootLabelTriple = new Triple(
        rootNode,
        SparqlNodes.PREF_LABEL.createUriNode(),
        Nodes.CONCEPT.getLabelNode(0));
    return groupBuilder.addOptional(createConceptLabelGroup(0, rootLabelTriple));
  }

  private ElementGroupBuilder addDeeperLevelTriples(ElementGroupBuilder groupBuilder) {
    ElementGroup previous = addLevelElements(createGroup(), depth, getConceptNode(depth - 1))
        .build();
    for (int currentIndex = depth - 1; currentIndex >= 1; currentIndex--) {
      previous = addLevelElements(createGroup(), currentIndex, getConceptNode(currentIndex - 1))
          .addOptional(previous)
          .build();
    }
    return groupBuilder.addOptional(previous);
  }

  private Node getConceptNode(int level) {
    if (level == 0) {
      return rootNode;
    }
    return Nodes.CONCEPT.getNode(level);
  }

  private ElementGroupBuilder addLevelElements(ElementGroupBuilder builder, int level, Node parent) {
    SparqlExpressionBuilder filterBuilder = SparqlExpressionBuilder
        .use(createMultipleOptionsExpression(
            new SparqlUriExpression(Nodes.RELATION.getNode(level)),
            getNeighbourhoodRelationUris()));
    filterBuilder = addConceptFilters(filterBuilder, level);
    builder
        .add(createRelationTriple(level, parent))
        .add(createIsMaterializedConceptTriple(level))
        .addAsFilter(filterBuilder.toExpr());
    return builder.addOptional(createConceptLabelGroup(level));
  }

  private Triple createIsMaterializedConceptTriple(int level) {
    Node anonymousNode = NodeFactory.createVariable("a" + level); //$NON-NLS-1$
    return Triple.create(
        Nodes.CONCEPT.getNode(level),
        anonymousNode,
        SparqlNodes.CONCEPT.createUriNode());
  }

  private SparqlExpressionBuilder addConceptFilters(SparqlExpressionBuilder filterBuilder, int level) {
    for (int currentIndex = 0; currentIndex < level; currentIndex++) {
      filterBuilder.and(createDifferentNodesExpression(
          getConceptNode(currentIndex),
          getConceptNode(level)));
    }
    return filterBuilder;
  }

  private ElementGroup createConceptLabelGroup(int level) {
    return createConceptLabelGroup(level, createConceptLabelTriple(level));
  }

  private ElementGroup createConceptLabelGroup(int level, Triple conceptLabelTriple) {
    return createGroup()
        .add(conceptLabelTriple)
        .addAsFilter(
            createMultipleOptionsExpression(
                new SparqlLanguageExpression(Nodes.CONCEPT.getLabelNode(level)),
                getLanguages()),
            !getLanguages().isEmpty())
        .build();
  }

  private Triple createConceptLabelTriple(int level) {
    return createLabelNodeTriple(level, Nodes.CONCEPT, SparqlNodes.PREF_LABEL);
  }

  private Triple createRelationTriple(int level, Node parent) {
    return Triple.create(parent, Nodes.RELATION.getNode(level), getConceptNode(level));
  }

  private Triple createLabelNodeTriple(int level, Nodes node, SparqlNodes labelNode) {
    return Triple.create(node.getNode(level), labelNode.createUriNode(), node.getLabelNode(level));
  }

  private E_NotEquals createDifferentNodesExpression(Node left, Node right) {
    return new E_NotEquals(new NodeValueNode(left), new NodeValueNode(right));
  }

  private List<String> getNeighbourhoodRelationUris() {
    List<String> relationUris = new ArrayList<String>(relations.size());
    for (SparqlNodes current : relations) {
      relationUris.add(current.getUri());
    }
    return relationUris;
  }

  @Override
  protected SparqlQueryBuilder adapt(SparqlQueryBuilder builder) {
    builder = builder.addResultVariable(
        Nodes.CONCEPT.getNode(0).getName(),
        new NodeValueNode(rootNode)).addResultVariable(Nodes.CONCEPT.getLabelNode(0));
    for (int currentIndex = 1; currentIndex <= depth; currentIndex++) {
      builder = addResultVariables(builder, currentIndex);
    }
    return builder;
  }

  private SparqlQueryBuilder addResultVariables(SparqlQueryBuilder builder, int level) {
    return builder
        .addResultVariable(getConceptNode(level))
        .addResultVariable(Nodes.CONCEPT.getLabelNode(level))
        .addResultVariable(Nodes.RELATION.getNode(level));
  }

}
