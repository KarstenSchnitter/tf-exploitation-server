//Copyright (c) 2015 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.neighbourhood;

import java.util.ArrayList;
import java.util.List;

import net.disy.eenvplus.tfes.core.api.response.IRelatedConcept;
import net.disy.eenvplus.tfes.core.api.response.IVisualizationNode;
import net.disy.eenvplus.tfes.modules.sparql.result.ISourceLabelProvider;
import net.disy.eenvplus.tfes.modules.sparql.result.ResultFactory;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.hp.hpl.jena.query.QuerySolution;
import com.hp.hpl.jena.query.ResultSet;

// NOT_PUBLISHED
@Component
public final class RelativeNeighbourhoodResultSetMapper {

  @Autowired
  private ISourceLabelProvider sourceLabelProvider;

  public IVisualizationNode map(ResultSet resultSet, Integer depth) {
    if (!resultSet.hasNext()) {
      return null;
    }
    RelativeNeighbourhoodResultTreeBuilder builder = RelativeNeighbourhoodResultTreeBuilder.empty();
    while (resultSet.hasNext()) {
      QuerySolution current = resultSet.next();
      final List<IRelatedConcept> concepts = new ArrayList<>(depth);
      for (int currentLevel = 0; currentLevel <= depth; currentLevel++) {
        IRelatedConcept concept = getConcept(current, currentLevel);
        if (concept != null) {
          concepts.add(concept);
        }
      }
      builder = builder.addConcepts(concepts);
    }
    return builder.build();
  }

  private IRelatedConcept getConcept(QuerySolution current, int level) {
    return ResultFactory.createRelatedConcept(
        current,
        Nodes.CONCEPT.getNode(level),
        Nodes.CONCEPT.getLabelNode(level),
        Nodes.RELATION.getNode(level),
        sourceLabelProvider);
  }

}
