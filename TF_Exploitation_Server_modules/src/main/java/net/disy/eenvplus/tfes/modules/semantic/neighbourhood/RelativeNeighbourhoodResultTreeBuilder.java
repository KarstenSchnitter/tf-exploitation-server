//Copyright (c) 2015 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.semantic.neighbourhood;

import java.util.List;
import java.util.Locale;

import net.disy.eenvplus.tfes.core.api.response.IRelatedConcept;
import net.disy.eenvplus.tfes.core.api.response.IVisualizationNode;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// NOT_PUBLISHED

public final class RelativeNeighbourhoodResultTreeBuilder {

  private static final Logger LOGGER = LoggerFactory
      .getLogger(RelativeNeighbourhoodResultTreeBuilder.class);
  private VisualizationNode root = new VisualizationNode();

  private RelativeNeighbourhoodResultTreeBuilder() {
  }

  public static RelativeNeighbourhoodResultTreeBuilder empty() {
    return new RelativeNeighbourhoodResultTreeBuilder();
  }

  public RelativeNeighbourhoodResultTreeBuilder addConcepts(List<IRelatedConcept> concepts) {
    logAddConcept(concepts);
    if (concepts.isEmpty()) {
      return this;
    }
    if (hasNoRootElement() || hasRootElement(concepts.get(0))) {
      root.setElement(concepts.get(0));
      addChildren(root, chopFirstConcept(concepts));
    }
    return this;
  }

  @SuppressWarnings("nls")
  private void logAddConcept(List<IRelatedConcept> concepts) {
    StringBuilder builder = new StringBuilder("Adding Concept String:\n");
    for (IRelatedConcept concept : concepts) {
      builder.append('\t').append(concept.toString()).append('\n');
    }
    LOGGER.trace(builder.toString());
  }

  private boolean hasNoRootElement() {
    return root.getElement() == null;
  }

  private boolean hasRootElement(IRelatedConcept concept) {
    if (root.getElement() == null) {
      return concept == null;
    }
    if (concept == null) {
      return false;
    }
    IRelatedConcept rootConcept = root.getElement();
    return isSameConcept(rootConcept, concept);
  }

  private static boolean isSameConcept(IRelatedConcept left, IRelatedConcept right) {
    return StringUtils.equals(left.getConceptUri(), right.getConceptUri())
        && StringUtils.equals(left.getLabel(), right.getLabel())
        && isCompatibleLanguagePair(left.getLanguage(), right.getLanguage());
  }

  private static boolean isCompatibleLanguagePair(String left, String right) {
    if (left == null || right == null) {
      return StringUtils.equals(left, right);
    }
    String leftLanguage = mapToBaseLanguage(left);
    String rightLanguage = mapToBaseLanguage(right);
    return StringUtils.equals(leftLanguage, rightLanguage);
  }

  private static String mapToBaseLanguage(String language) {
    return Locale.forLanguageTag(language).getLanguage();
  }

  private static List<IRelatedConcept> chopFirstConcept(List<IRelatedConcept> concepts) {
    return concepts.subList(1, concepts.size());
  }

  private static void addChildren(IVisualizationNode root, List<IRelatedConcept> toAdd) {
    if (!toAdd.isEmpty()) {
      for (IVisualizationNode child : root.getChildren()) {
        if (isSameConcept(child.getElement(), toAdd.get(0))) {
          addChildren(child, chopFirstConcept(toAdd));
          return;
        }
      }
      if (root instanceof VisualizationNode) {
        ((VisualizationNode) root).addChild(empty().addConcepts(toAdd).build());
      }
    }
  }

  public IVisualizationNode build() {
    return root;
  }

}
