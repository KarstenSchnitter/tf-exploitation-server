//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.sparql.element;

import static com.hp.hpl.jena.graph.NodeFactory.createVariable;
import static com.hp.hpl.jena.graph.Triple.create;
import static net.disy.eenvplus.tfes.modules.sparql.element.ElementUnionBuilder.createUnion;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.ALT_LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.EXACT_MATCH;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.PREF_LABEL;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.Triple;
import com.hp.hpl.jena.sparql.syntax.ElementUnion;

// NOT_PUBLISHED

public class SparqlElementFactory {

  private SparqlElementFactory() {
  }

  public static ElementUnion createConceptLabelUnion(Node concept, Node label) {
    Triple prefLabel = create(concept, PREF_LABEL.createUriNode(), label);
    Triple altLabel = create(concept, ALT_LABEL.createUriNode(), label);
    return createUnion().addTriple(prefLabel).addTriple(altLabel).build();
  }

  public static ElementUnion createExactMatchUnion(Node left, Node right) {
    Triple there = create(left, EXACT_MATCH.createUriNode(), right);
    Triple back = create(right, EXACT_MATCH.createUriNode(), left);
    return createUnion().addTriple(there).addTriple(back).build();
  }

  public static Triple createSchemeTriple(SparqlNodes concept, SparqlNodes scheme) {
    return create(concept.createVar(), scheme.createUriNode(), scheme.createVar());
  }

  public static Triple createSchemeTriple(Node concept, SparqlNodes scheme) {
    return createPredicateVar(concept, scheme);
  }

  public static Triple createPredicateVar(Node concept, SparqlNodes scheme) {
    return create(concept, scheme.createUriNode(), scheme.createVar());
  }

  public static Triple createSourceTriple(SparqlNodes inScheme, String sourceLabel) {
    return createSourceTriple(inScheme, createVariable(sourceLabel));
  }

  public static Triple createSourceTriple(SparqlNodes inScheme, Node sourceLabel) {
    return create(inScheme.createVar(), LABEL.createUriNode(), sourceLabel);
  }

}
