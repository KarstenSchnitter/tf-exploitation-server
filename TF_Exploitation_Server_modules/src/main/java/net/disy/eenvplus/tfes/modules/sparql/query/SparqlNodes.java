//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.sparql.query;

import static java.util.Arrays.asList;
import static org.apache.commons.lang3.StringUtils.isBlank;

import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.graph.NodeFactory;
import com.hp.hpl.jena.sparql.core.Var;
import com.hp.hpl.jena.sparql.expr.E_Lang;
import com.hp.hpl.jena.sparql.expr.E_Str;
import com.hp.hpl.jena.sparql.expr.Expr;
import com.hp.hpl.jena.sparql.expr.ExprVar;
import com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueNode;
import com.hp.hpl.jena.sparql.expr.nodevalue.NodeValueString;

// NOT_PUBLISHED

public enum SparqlNodes {
  BROADER(Builder.node("broader") //$NON-NLS-1$
      .label("has broader") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#broader")), //$NON-NLS-1$
  NARROWER(Builder.node("narrower") //$NON-NLS-1$
      .label("has narrower") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#narrower")), //$NON-NLS-1$
  RELATED(Builder.node("related") //$NON-NLS-1$
      .label("has related") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#related")), //$NON-NLS-1$
  PREF_LABEL(Builder.node("prefLabel") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#prefLabel")), //$NON-NLS-1$
  IN_SCHEME(Builder.node("schema") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#inScheme")), //$NON-NLS-1$
  CONCEPT(Builder.node("concept") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#Concept")), //$NON-NLS-1$
  CONCEPT_SCHEME(Builder.node("conceptScheme") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#ConceptScheme")), //$NON-NLS-1$
  RELATION(Builder.node("relation").uri("")), //$NON-NLS-1$ //$NON-NLS-2$
  LABEL(Builder.node("label") //$NON-NLS-1$
      .uri("http://www.w3.org/2000/01/rdf-schema#label")), //$NON-NLS-1$
  EXACT_MATCH(Builder.node("exactMatch") //$NON-NLS-1$
      .label("has exact match") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#exactMatch")), //$NON-NLS-1$
  CLOSE_MATCH(Builder.node("closeMatch") //$NON-NLS-1$
      .label("has close match") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#closeMatch")), //$NON-NLS-1$
  BROAD_MATCH(Builder.node("broadMatch") //$NON-NLS-1$
      .label("has broader match") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#broadMatch")), //$NON-NLS-1$
  NARROW_MATCH(Builder.node("narrowMatch") //$NON-NLS-1$
      .label("has narrower match") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#narrowMatch")), //$NON-NLS-1$
  RELATED_MATCH(Builder.node("relatedMatch") //$NON-NLS-1$
      .label("has related match") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#relatedMatch")), //$NON-NLS-1$
  ALT_LABEL(Builder.node("altLabel") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#altLabel")), //$NON-NLS-1$
  TOP_MOST_CONCEPT(Builder.node("topMostConcept") //$NON-NLS-1$
      .uri("http://www.w3.org/2004/02/skos/core#hasTopConcept")), //$NON-NLS-1$
  LANGUAGE(Builder.node("languages") //$NON-NLS-1$
      .uri("http://purl.org/dc/elements/1.1/language")), //$NON-NLS-1$
  SORT_PRIORITY(Builder.node("sortPriority") //$NON-NLS-1$
      .uri("http://www.w3.org/ns/ui#sortPriority")); //$NON-NLS-1$

  private static class Builder {
    private String name;
    private String uri;
    private String label;

    public static Builder node(String name) {
      return new Builder(name);
    }

    private Builder(String name) {
      this.name = name;
    }

    public Builder label(String label) {
      this.label = label;
      return this;
    }

    public Builder uri(String uri) {
      this.uri = uri;
      return this;
    }
  }

  private String name;
  private String uri;
  private String label;

  private SparqlNodes(Builder builder) {
    this.name = builder.name;
    this.label = builder.label;
    this.uri = builder.uri;
  }

  public static SparqlNodes parseName(String name) {
    for (SparqlNodes current : SparqlNodes.values()) {
      if (current.getName().equals(name)) {
        return current;
      }
    }
    return null;
  }

  public static Collection<SparqlNodes> getRelations() {
    return asList(BROADER, NARROWER, RELATED);
  }

  public static List<String> getRelationUris() {
    Collection<SparqlNodes> relations = SparqlNodes.getRelations();
    List<String> labels = new ArrayList<>(relations.size());
    for (SparqlNodes relation : relations) {
      labels.add(relation.getUri());
    }
    return labels;
  }

  public String getName() {
    if (isBlank(name)) {
      throw new IllegalStateException("No name specified for Node " + name()); //$NON-NLS-1$
    }
    return name;
  }

  public String getUri() {
    if (isBlank(uri)) {
      throw new IllegalStateException("No uri specified for Node " + name()); //$NON-NLS-1$
    }
    return uri;
  }

  public String getLabel() {
    if (isBlank(label)) {
      throw new IllegalStateException("No label specified for Node " + name()); //$NON-NLS-1$
    }
    return label;
  }

  public Node createUriNode() {
    return NodeFactory.createURI(getUri());
  }

  public Node createVariableNode() {
    return NodeFactory.createVariable(getName());
  }

  public boolean hasUri(String uri) {
    return this.uri.equals(uri);
  }

  public Var createVar() {
    return Var.alloc(getName());
  }

  public NodeValueString createUriValueString() {
    return new NodeValueString(getUri());
  }

  public Expr createStringExprVar() {
    return new E_Str(createExprVar());
  }

  public ExprVar createExprVar() {
    return new ExprVar(getName());
  }

  public Expr createLangExprVar() {
    return new E_Lang(createExprVar());
  }

  public NodeValueNode createUriValueNode() {
    return new NodeValueNode(createUriNode());
  }

  public static String getLabelForUri(String uri) {
    for (SparqlNodes current : values()) {
      if (current.hasUri(uri)) {
        return current.getLabel();
      }
    }
    return null;
  }

}
