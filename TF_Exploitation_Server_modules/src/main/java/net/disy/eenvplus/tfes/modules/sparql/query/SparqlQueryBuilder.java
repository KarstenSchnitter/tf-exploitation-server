//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.sparql.query;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.sparql.expr.Expr;
import com.hp.hpl.jena.sparql.syntax.Element;

// NOT_PUBLISHED

public class SparqlQueryBuilder {

  private Query query;

  private SparqlQueryBuilder() {
    this.query = QueryFactory.create();
  }

  public Query getQuery() {
    return query;
  }

  public static SparqlQueryBuilder createSelectDistinctQuery() {
    SparqlQueryBuilder builder = createSelectQuery();
    builder.query.setDistinct(true);
    return builder;
  }

  public static SparqlQueryBuilder createSelectQuery() {
    SparqlQueryBuilder builder = new SparqlQueryBuilder();
    builder.query.setQuerySelectType();
    return builder;
  }

  public SparqlQueryBuilder withBody(Element body) {
    getQuery().setQueryPattern(body);
    return this;
  }

  public SparqlQueryBuilder addResultVariable(SparqlNodes node) {
    return addResultVariable(node.getName());
  }

  public SparqlQueryBuilder addResultVariable(Node node) {
    return addResultVariable(node.getName());
  }

  public SparqlQueryBuilder addResultVariable(String label) {
    getQuery().addResultVar(label);
    return this;
  }

  public SparqlQueryBuilder addResultVariable(String label, boolean condition) {
    if (condition) {
      getQuery().addResultVar(label);
    }
    return this;
  }

  public SparqlQueryBuilder addResultVariable(String alias, Expr expression) {
    getQuery().addResultVar(alias, expression);
    return this;
  }

  public SparqlQueryBuilder withLimit(int limit) {
    if (limit < 0) {
      throw new IllegalArgumentException(
          "Expected Limit for SparQL query to be non-negative Integer."); //$NON-NLS-1$
    }
    if (limit > 0) {
      getQuery().setLimit(limit);
    }
    return this;
  }
}
