//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.modules.sparql.result;

import net.disy.eenvplus.tfes.core.api.response.IRelatedConcept;
import net.disy.eenvplus.tfes.core.api.response.IRelative;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.core.api.response.ISynonym;
import net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes;

import org.apache.commons.lang3.StringUtils;

import com.hp.hpl.jena.graph.Node;
import com.hp.hpl.jena.query.QuerySolution;

// NOT_PUBLISHED

public class ResultFactory {

  private ResultFactory() {
  };

  public static ISuggestion createSuggestion(
      final QuerySolution current,
      final SparqlNodes label,
      final SparqlNodes uri,
      final String sourceLabel) {
    return createSuggestion(current, label.getName(), uri.getName(), sourceLabel);
  }

  public static ISuggestion createSuggestion(
      final QuerySolution current,
      final String label,
      final SparqlNodes uri,
      final String sourceLabel) {
    return createSuggestion(current, label, uri.getName(), sourceLabel);
  }

  public static ISuggestion createSuggestion(
      final QuerySolution current,
      final String label,
      final String uri,
      final String sourceLabel) {
    return new CommonResult.Builder()
        .conceptUri(QuerySolutionItemExtractors.getUri(uri, current))
        .label(QuerySolutionItemExtractors.getLabel(label, current))
        .language(QuerySolutionItemExtractors.getLanguage(label, current))
        .sourceLabel(QuerySolutionItemExtractors.getLabel(sourceLabel, current))
        .build();
  }

  public static ISynonym createSynonym(
      final QuerySolution current,
      final SparqlNodes label,
      final SparqlNodes concept,
      final SparqlNodes relation,
      final String sourceLabel) {
    return new CommonResult.Builder()
        .conceptUri(QuerySolutionItemExtractors.getUri(concept, current))
        .label(QuerySolutionItemExtractors.getLabel(label, current))
        .language(QuerySolutionItemExtractors.getLanguage(label, current))
        .sourceLabel(QuerySolutionItemExtractors.getLabel(sourceLabel, current))
        .build();
  }

  public static IRelative createRelative(
      final QuerySolution current,
      final SparqlNodes label,
      final SparqlNodes concept,
      final SparqlNodes relation,
      final String sourceLabel) {
    String relationUri = QuerySolutionItemExtractors.getUri(relation, current);
    return new CommonResult.Builder()
        .conceptUri(QuerySolutionItemExtractors.getUri(concept, current))
        .label(QuerySolutionItemExtractors.getLabel(label, current))
        .language(QuerySolutionItemExtractors.getLanguage(label, current))
        .relationLabel(SparqlNodes.getLabelForUri(relationUri))
        .relationUri(relationUri)
        .sourceLabel(QuerySolutionItemExtractors.getLabel(sourceLabel, current))
        .build();
  }

  public static IRelatedConcept createRelatedConcept(
      QuerySolution current,
      Node concept,
      Node conceptLabel,
      Node relation,
      ISourceLabelProvider sourceLabel) {
    String conceptUri = QuerySolutionItemExtractors.getUri(concept.getName(), current);
    if (StringUtils.isBlank(conceptUri)) {
      return null;
    }
    String relationUri = QuerySolutionItemExtractors.getUri(relation.getName(), current);
    return new CommonResult.Builder()
        .conceptUri(conceptUri)
        .label(QuerySolutionItemExtractors.getLabel(conceptLabel.getName(), current))
        .language(QuerySolutionItemExtractors.getLanguage(conceptLabel.getName(), current))
        .relationUri(relationUri)
        .relationLabel(SparqlNodes.getLabelForUri(relationUri))
        .sourceLabel(sourceLabel.provideFor(conceptUri))
        .build();
  }
}
