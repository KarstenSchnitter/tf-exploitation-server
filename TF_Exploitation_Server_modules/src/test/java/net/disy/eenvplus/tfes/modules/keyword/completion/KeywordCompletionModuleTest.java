package net.disy.eenvplus.tfes.modules.keyword.completion;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasConceptUri;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasLanguage;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasTitle;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasToString;
import static org.hamcrest.Matchers.stringContainsInOrder;
import static org.junit.Assert.assertThat;
import static org.mockito.Answers.RETURNS_DEEP_STUBS;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.when;

import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.query.ISuggestionQuery;
import net.disy.eenvplus.tfes.core.api.response.ISuggestion;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

@RunWith(MockitoJUnitRunner.class)
@SuppressWarnings("nls")
public class KeywordCompletionModuleTest {

  private static final String LONG_TEST_KEYWORD = "EigeneKreationOhneMatchInTripleStore";

  private static final String RESULT_KEYWORD = "Result Keyword";
  private static final String RESULT_LANGUAGE = "Result Language";
  private static final String RESULT_URI = "Result URI";

  @Mock
  private ISuggestionQuery suggestionQuery;

  @Mock(answer = RETURNS_DEEP_STUBS)
  private ResultSet jenaResult;

  @Mock
  private ISparqlConnector sparqlConnector;

  @InjectMocks
  private KeywordCompletionModule labelModule;

  @Captor
  private ArgumentCaptor<Query> jenaQuery;

  // Ensure correct default behavior
  @Before
  public void initSuggestionQuery() {
    when(suggestionQuery.getExtraParameters()).thenReturn(new HashMap<String, Object>());
    when(suggestionQuery.getKeyword()).thenReturn(LONG_TEST_KEYWORD);
    when(suggestionQuery.getLanguages()).thenReturn(Collections.<String> emptyList());
    when(suggestionQuery.getMaxCount()).thenReturn(0);
    when(suggestionQuery.getThesauri()).thenReturn(Collections.<String> emptyList());
  }

  @Before
  public void initResultSetMock() {
    when(jenaResult.hasNext()).thenReturn(true, false);
    when(jenaResult.next().getLiteral(anyString()).getString()).thenReturn(RESULT_KEYWORD);
    when(jenaResult.next().getLiteral(anyString()).getLanguage()).thenReturn(RESULT_LANGUAGE);
    when(jenaResult.next().getResource(anyString()).getURI()).thenReturn(RESULT_URI);
  }

  @Before
  public void initQueryCaptor() throws ServiceException {
    when(sparqlConnector.executeSparqlQuery(jenaQuery.capture())).thenReturn(jenaResult);
  }

  @After
  public void logJenaQuery() {
    System.out.println(jenaQuery.getValue().toString());
  }

  @Test
  public void standardQueryInitialisation() throws Exception {

    Callable<Collection<ISuggestion>> callable = labelModule.getSuggestions(suggestionQuery);
    Collection<ISuggestion> suggestions = execute(callable);

    assertThat(
        jenaQuery.getValue(),
        hasToString(allOf(
            containsString(LONG_TEST_KEYWORD),
            containsString(LABEL.getName()),
            containsString(CONCEPT.getName()))));
    assertResult(suggestions);
  }

  private static void assertResult(Collection<ISuggestion> suggestions) {
    assertThat(
        suggestions,
        contains(both(hasTitle(equalTo(RESULT_KEYWORD)))
            .and(hasLanguage(equalTo(RESULT_LANGUAGE)))
            .and(hasConceptUri(equalTo(RESULT_URI)))));
  }

  private Collection<ISuggestion> execute(Callable<Collection<ISuggestion>> callable)
      throws InterruptedException,
      ExecutionException {
    ExecutorService executor = Executors.newSingleThreadExecutor();
    Future<Collection<ISuggestion>> future = executor.submit(callable);
    return future.get();
  }

  @Test
  public void queryWithLimit() throws Exception {
    when(suggestionQuery.getMaxCount()).thenReturn(13);

    Callable<Collection<ISuggestion>> callable = labelModule.getSuggestions(suggestionQuery);
    Collection<ISuggestion> suggestions = execute(callable);

    assertThat(jenaQuery.getValue(), hasToString(stringContainsInOrder(asList("LIMIT", "13"))));
    assertResult(suggestions);
  }

  @Test
  public void queryWithLanguages() throws Exception {
    when(suggestionQuery.getLanguages()).thenReturn(asList("lang1", "lang2"));

    Callable<Collection<ISuggestion>> callable = labelModule.getSuggestions(suggestionQuery);
    Collection<ISuggestion> suggestions = execute(callable);

    assertThat(
        jenaQuery.getValue(),
        hasToString(stringContainsInOrder(asList("FILTER", "lang1", "||", "lang2"))));
    assertResult(suggestions);
  }

  @Test
  public void queryWithTheasuri() throws Exception {
    when(suggestionQuery.getThesauri()).thenReturn(asList("thesaurusA", "thesaurusB"));

    Callable<Collection<ISuggestion>> callable = labelModule.getSuggestions(suggestionQuery);
    Collection<ISuggestion> suggestions = execute(callable);

    assertThat(
        jenaQuery.getValue(),
        hasToString(stringContainsInOrder(asList("FILTER", "thesaurusA", "||", "thesaurusB"))));
    assertResult(suggestions);
  }

}
