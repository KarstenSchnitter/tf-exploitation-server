package net.disy.eenvplus.tfes.modules.keyword.completion;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.ALT_LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.PREF_LABEL;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.hasToString;
import static org.hamcrest.Matchers.startsWith;
import static org.hamcrest.Matchers.stringContainsInOrder;
import static org.junit.Assert.assertThat;

import org.junit.After;
import org.junit.Test;

import com.hp.hpl.jena.query.Query;

@SuppressWarnings("nls")
public class SuggestionSparqlQueryBuilderTest {

  private static final String TEST_KEYWORD = "Test keyword";
  private static final String TEST_LANGUAGE_1 = "lang1";
  private static final String TEST_LANGUAGE_2 = "lang2";
  private static final String TEST_SCHEMA_1 = "schema1";
  private static final String TEST_SCHEMA_2 = "schema2";
  private static final String TEST_SOURCE = "source";
  private Query query;

  @After
  public void logQuery() {
    System.out.println(query.toString());

  }

  @Test
  public void simpleQuery() {
    query = SuggestionSparqlQueryBuilder.createSuggestionQuery(TEST_KEYWORD, TEST_SOURCE).build();
    assertThat(
        query,
        hasToString(both(startsWith("SELECT DISTINCT")).and(
            stringContainsInOrder(asList(
                LABEL.getName(),
                CONCEPT.getName(),
                "WHERE",
                CONCEPT.getName(),
                PREF_LABEL.getUri(),
                LABEL.getName(),
                CONCEPT.getName(),
                ALT_LABEL.getUri(),
                LABEL.getName(),
                "FILTER",
                LABEL.getName(),
                TEST_KEYWORD)))));

  }

  @Test
  public void limitQuery() {
    query = SuggestionSparqlQueryBuilder
        .createSuggestionQuery(TEST_KEYWORD, TEST_SOURCE)
        .withLimit(27)
        .build();
    assertThat(
        query,
        hasToString(both(startsWith("SELECT DISTINCT")).and(
            stringContainsInOrder(asList("LIMIT", "27")))));
  }

  @Test
  public void languages() {
    query = SuggestionSparqlQueryBuilder
        .createSuggestionQuery(TEST_KEYWORD, TEST_SOURCE)
        .withLanguages(asList(TEST_LANGUAGE_1, TEST_LANGUAGE_2))
        .build();
    assertThat(
        query,
        hasToString(both(startsWith("SELECT DISTINCT")).and(
            stringContainsInOrder(asList("FILTER", TEST_LANGUAGE_1, "||", TEST_LANGUAGE_2)))));

  }

  @Test
  public void schemes() {
    query = SuggestionSparqlQueryBuilder
        .createSuggestionQuery(TEST_KEYWORD, TEST_SOURCE)
        .withSchemas(asList(TEST_SCHEMA_1, TEST_SCHEMA_2))
        .build();
    assertThat(
        query,
        hasToString(both(startsWith("SELECT DISTINCT")).and(
            stringContainsInOrder(asList(
                IN_SCHEME.getUri(),
                "FILTER",
                TEST_SCHEMA_1,
                "||",
                TEST_SCHEMA_2)))));

  }

  @Test
  public void sources() throws Exception {
    query = SuggestionSparqlQueryBuilder
        .createSuggestionQuery(TEST_KEYWORD, TEST_SOURCE)
        .withSource(true)
        .build();
    assertThat(
        query,
        hasToString(both(startsWith("SELECT DISTINCT")).and(
            stringContainsInOrder(asList(
                "OPTIONAL",
                IN_SCHEME.getName(),
                LABEL.getUri(),
                TEST_SOURCE)))));

  }
}
