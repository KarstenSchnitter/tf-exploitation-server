package net.disy.eenvplus.tfes.modules.keyword.explanation;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasToString;
import static org.hamcrest.Matchers.stringContainsInOrder;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

import java.util.Collections;
import java.util.HashMap;
import java.util.concurrent.Callable;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;

import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.query.IDescribeConceptQuery;
import net.disy.eenvplus.tfes.core.api.response.IConceptDescription;
import net.disy.eenvplus.tfes.modules.core.ISparqlConnector;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Spy;
import org.mockito.runners.MockitoJUnitRunner;

import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.ResultSet;

@SuppressWarnings("nls")
@RunWith(MockitoJUnitRunner.class)
public class KeywordExplanationModuleTest {

  private static final String LONG_TEST_CONCEPT = "EigeneKreationOhneMatchInTripleStore";

  @Mock
  private IDescribeConceptQuery conceptQuery;

  @Mock
  private ISparqlConnector sparqlConnector;

  @Mock
  private ResultSet jenaResult;

  @Mock
  private DescribeContextResultSetMapper resultSetMapper;

  @Spy
  private ExplanationQueryFactory explanationQueryFactory;

  @InjectMocks
  private KeywordExplanationModule descriptionModule;

  @Captor
  private ArgumentCaptor<Query> jenaQuery;

  // Ensure correct default behavior
  @Before
  public void initSuggestionQuery() {
    when(conceptQuery.getConcept()).thenReturn(LONG_TEST_CONCEPT);
    when(conceptQuery.getExtraParameters()).thenReturn(new HashMap<String, Object>());
    when(conceptQuery.getLanguages()).thenReturn(Collections.<String> emptyList());
    when(conceptQuery.getMaxCount()).thenReturn(0);
    when(conceptQuery.getThesauri()).thenReturn(Collections.<String> emptyList());
  }

  @Before
  public void initQueryCaptor() throws ServiceException {
    when(sparqlConnector.executeSparqlQuery(jenaQuery.capture())).thenReturn(jenaResult);
  }

  @After
  public void logJenaQuery() {
    System.out.println(jenaQuery.getValue().toString());
  }

  @Test
  public void standardQuery() throws InterruptedException, ExecutionException {
    Callable<IConceptDescription> callable = descriptionModule.getDescribeConcept(conceptQuery);
    execute(callable);

    assertThat(
        jenaQuery.getValue(),
        hasToString(stringContainsInOrder(asList(
            LONG_TEST_CONCEPT,
            "AS",
            CONCEPT.getName(),
            "?p",
            "?o",
            "WHERE",
            LONG_TEST_CONCEPT,
            "?p",
            "?o",
            IN_SCHEME.getUri(),
            IN_SCHEME.getName()))));

    verify(resultSetMapper).map(any(ResultSet.class));
  }

  private IConceptDescription execute(Callable<IConceptDescription> callable)
      throws InterruptedException,
      ExecutionException {
    ExecutorService executor = Executors.newSingleThreadExecutor();
    Future<IConceptDescription> future = executor.submit(callable);
    return future.get();
  }

  @Test
  public void queryWithMaxCount() throws InterruptedException, ExecutionException {
    when(conceptQuery.getMaxCount()).thenReturn(13);

    Callable<IConceptDescription> callable = descriptionModule.getDescribeConcept(conceptQuery);
    execute(callable);

    assertThat(jenaQuery.getValue(), hasToString(containsString("LIMIT   13")));

    verify(resultSetMapper).map(any(ResultSet.class));
  }

  @Test
  public void queryWithThesauri() throws InterruptedException, ExecutionException {
    when(conceptQuery.getThesauri()).thenReturn(asList("thesaurusA", "thesaurusB"));

    Callable<IConceptDescription> callable = descriptionModule.getDescribeConcept(conceptQuery);
    execute(callable);

    assertThat(
        jenaQuery.getValue(),
        hasToString(both(containsString("thesaurusA")).and(containsString("thesaurusB"))));

    verify(resultSetMapper).map(any(ResultSet.class));
  }

  @Test
  public void queryWithLanguages() throws InterruptedException, ExecutionException {
    when(conceptQuery.getLanguages()).thenReturn(asList("SpracheA", "SpracheB"));

    Callable<IConceptDescription> callable = descriptionModule.getDescribeConcept(conceptQuery);
    execute(callable);

    assertThat(
        jenaQuery.getValue(),
        hasToString(both(containsString("SpracheA")).and(containsString("SpracheB"))));

    verify(resultSetMapper).map(any(ResultSet.class));
  }

}
