package net.disy.eenvplus.tfes.modules.keyword.explanation;

import static java.lang.String.format;
import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.keyword.explanation.SimpleExplanationQueryBuilder.createConceptQuery;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.containsString;
import static org.hamcrest.Matchers.hasToString;
import static org.hamcrest.Matchers.stringContainsInOrder;
import static org.junit.Assert.assertThat;

import org.junit.After;
import org.junit.Test;

import com.hp.hpl.jena.query.Query;

@SuppressWarnings("nls")
public class SimpleExplanationQueryBuilderTest {

  private static final String TEST_CONCEPT = "Test Concept";
  private static final String TEST_SCHEMA_1 = "Test Schema 1";
  private static final String TEST_SCHEMA_2 = "Test Schema 2";
  private static final String LITERAL_PATTERN = "( ! isLiteral(?o) )";
  private static final String LANGUAGE_PATTERN = "langMatches(lang(?o), \"%s\")";
  private static final String TEST_LANGUAGE_1 = "Test Langugage 1";
  private static final String TEST_LANGUAGE_2 = "Test Langugage 2";
  private Query jenaQuery;

  @After
  public void logQuery() {
    System.out.println(jenaQuery.toString());
  }

  @Test
  public void simpleQuery() {

    jenaQuery = createConceptQuery(TEST_CONCEPT).build();

    // @formatter:off

    assertThat(jenaQuery, hasToString(stringContainsInOrder(asList(
        "SELECT", "DISTINCT", //
          TEST_CONCEPT, "AS", CONCEPT.getName(), "?p", "?o",//
        "WHERE", "{", //
          TEST_CONCEPT, "?p", "?o", //
                              IN_SCHEME.getUri(), "?schema",//
          "FILTER", "true"))));

    // @formatter:on
  }

  @Test
  public void limit() {
    jenaQuery = createConceptQuery(TEST_CONCEPT).withLimit(13).build();

    assertThat(jenaQuery, hasToString(containsString("LIMIT   13")));
  }

  @Test
  public void oneThesaurus() {
    jenaQuery = createConceptQuery(TEST_CONCEPT).withSchemas(asList(TEST_SCHEMA_1)).build();

    assertThat(
        jenaQuery,
        hasToString(stringContainsInOrder(asList("FILTER", IN_SCHEME.getName(), TEST_SCHEMA_1))));
  }

  @Test
  public void twoThesauri() {
    jenaQuery = createConceptQuery(TEST_CONCEPT)
        .withSchemas(asList(TEST_SCHEMA_1, TEST_SCHEMA_2))
        .build();

    assertThat(
        jenaQuery,
        hasToString(both(
            stringContainsInOrder(asList("FILTER", IN_SCHEME.getName(), TEST_SCHEMA_1))) //
            .and(stringContainsInOrder(asList("FILTER", IN_SCHEME.getName(), TEST_SCHEMA_2)))));
  }

  @Test
  public void oneLanguage() {
    jenaQuery = createConceptQuery(TEST_CONCEPT).withLanguages(asList(TEST_LANGUAGE_1)).build();

    assertThat(
        jenaQuery,
        hasToString(stringContainsInOrder(asList(
            LITERAL_PATTERN,
            "||",
            format(LANGUAGE_PATTERN, TEST_LANGUAGE_1)))));

  }

  @Test
  public void twoLanguages() {
    jenaQuery = createConceptQuery(TEST_CONCEPT).withLanguages(
        asList(TEST_LANGUAGE_1, TEST_LANGUAGE_2)).build();

    assertThat(
        jenaQuery,
        hasToString(stringContainsInOrder(asList(
            LITERAL_PATTERN,
            "||",
            format(LANGUAGE_PATTERN, TEST_LANGUAGE_1),
            "||",
            format(LANGUAGE_PATTERN, TEST_LANGUAGE_2)))));

  }
}
