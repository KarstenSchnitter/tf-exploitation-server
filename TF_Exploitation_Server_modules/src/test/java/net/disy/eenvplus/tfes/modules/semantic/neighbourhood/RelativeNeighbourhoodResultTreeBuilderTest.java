package net.disy.eenvplus.tfes.modules.semantic.neighbourhood;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher.hasConceptUri;
import static net.disy.eenvplus.tfes.core.api.response.IRelatedConceptBuilder.forConceptUri;
import static net.disy.eenvplus.tfes.core.api.response.IVisualizationNodeMatcher.hasChildren;
import static net.disy.eenvplus.tfes.core.api.response.IVisualizationNodeMatcher.hasElement;
import static net.disy.eenvplus.tfes.modules.semantic.neighbourhood.RelativeNeighbourhoodResultTreeBuilder.empty;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.nullValue;
import static org.junit.Assert.assertThat;
import net.disy.eenvplus.tfes.core.api.response.ILabelledConceptMatcher;
import net.disy.eenvplus.tfes.core.api.response.IRelatedConcept;
import net.disy.eenvplus.tfes.core.api.response.IVisualizationNode;

import org.hamcrest.Matcher;
import org.hamcrest.Matchers;
import org.junit.Test;

@SuppressWarnings("nls")
public class RelativeNeighbourhoodResultTreeBuilderTest {

  private static final String PARENT_URI = "test.parent.uri";
  private static final String CHILD_URI = "test.child.uri";
  private static final String GRAND_CHILD_URI = "test.grandchild.uri";

  @Test
  public void emptyHasNoConceptOrChildren() throws Exception {
    IVisualizationNode empty = empty().build();

    assertThat(empty, both(hasElement(nullValue())).and(hasNoChildren()));
  }

  private static Matcher<IVisualizationNode> hasNoChildren() {
    return hasChildren(Matchers.<IVisualizationNode> emptyIterable());
  }

  @Test
  public void addSingleConceptSetsRootElement() throws Exception {
    IRelatedConcept concept = forConceptUri(PARENT_URI).build();
    IVisualizationNode root = empty().addConcepts(asList(concept)).build();

    assertThat(root, both(hasElement(equalTo(concept))).and(hasNoChildren()));
  }

  @Test
  public void addSingleConceptSetsChildren() throws Exception {
    IRelatedConcept parent = forConceptUri(PARENT_URI).build();
    IRelatedConcept child = forConceptUri(CHILD_URI).build();
    IVisualizationNode root = empty().addConcepts(asList(parent, child)).build();

    assertThat(root.getChildren(), contains(both(hasElement(equalTo(child))).and(hasNoChildren())));
  }

  @Test
  public void addSingleConceptSetsGrandChildren() throws Exception {
    IRelatedConcept parent = forConceptUri(PARENT_URI).build();
    IRelatedConcept child = forConceptUri(CHILD_URI).build();
    IRelatedConcept grandChild = forConceptUri(CHILD_URI + "/grand").build();
    IRelatedConcept greatGrandChild = forConceptUri(CHILD_URI + "/great").build();
    IRelatedConcept prodigy = forConceptUri(CHILD_URI + "/prodigy").build();
    IVisualizationNode root = empty().addConcepts(
        asList(parent, child, grandChild, greatGrandChild, prodigy)).build();

    assertThat(root, both(hasElement(equalTo(parent))).and(hasChildren(contains(//
        both(hasElement(equalTo(child))).and(hasChildren(contains(//
            both(hasElement(equalTo(grandChild))).and(hasChildren(contains(//
                both(hasElement(equalTo(greatGrandChild))).and(hasChildren(contains(//
                    both(hasElement(equalTo(prodigy))).and(hasNoChildren()))))))))))))));
  }

  @Test
  public void ignoresConceptsWithDifferentParent() throws Exception {
    IRelatedConcept parent1 = forConceptUri(PARENT_URI + "/1").build();
    IRelatedConcept child1 = forConceptUri(CHILD_URI + "/1").build();
    IRelatedConcept parent2 = forConceptUri(PARENT_URI + "/2").build();
    IRelatedConcept child2 = forConceptUri(CHILD_URI + "/2").build();
    IVisualizationNode root = empty()
        .addConcepts(asList(parent1, child1))
        .addConcepts(asList(parent2, child2))
        .build();

    assertThat(
        root,
        both(hasElement(equalTo(parent1))).and(
            hasChildren(contains(both(hasElement(equalTo(child1))).and(hasNoChildren())))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void addsConceptsWithSameParent() throws Exception {
    IRelatedConcept parent = forConceptUri(PARENT_URI).build();
    IRelatedConcept child1 = forConceptUri(CHILD_URI + "/1").build();
    IRelatedConcept child2 = forConceptUri(CHILD_URI + "/2").build();
    IVisualizationNode root = empty()
        .addConcepts(asList(parent, child1))
        .addConcepts(asList(parent, child2))
        .build();

    assertThat(
        root,
        both(hasElement(equalTo(parent))).and(
            hasChildren(containsInAnyOrder(
                both(hasElement(equalTo(child1))).and(hasNoChildren()),
                both(hasElement(equalTo(child2))).and(hasNoChildren())))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void addsConceptsWithEqualParent() throws Exception {
    IRelatedConcept parent1 = forConceptUri(PARENT_URI).build();
    IRelatedConcept child1 = forConceptUri(CHILD_URI + "/1").build();
    IRelatedConcept parent2 = forConceptUri(PARENT_URI).build();
    IRelatedConcept child2 = forConceptUri(CHILD_URI + "/2").build();

    IVisualizationNode root = empty()
        .addConcepts(asList(parent1, child1))
        .addConcepts(asList(parent2, child2))
        .build();

    assertThat(
        root,
        both(hasElement(hasConceptUri(equalTo(PARENT_URI)))).and(
            hasChildren(containsInAnyOrder(
                both(hasElement(hasConceptUri(equalTo(CHILD_URI + "/1")))).and(hasNoChildren()),
                both(hasElement(hasConceptUri(equalTo(CHILD_URI + "/2")))).and(hasNoChildren())))));
  }

  @SuppressWarnings("unchecked")
  @Test
  public void addsConceptsWithEqualParentAndChild() throws Exception {
    IRelatedConcept parent1 = forConceptUri(PARENT_URI).build();
    IRelatedConcept child1 = forConceptUri(CHILD_URI).build();
    IRelatedConcept grandchild1 = forConceptUri(GRAND_CHILD_URI + "/1").build();
    IRelatedConcept parent2 = forConceptUri(PARENT_URI).build();
    IRelatedConcept child2 = forConceptUri(CHILD_URI).build();
    IRelatedConcept grandchild2 = forConceptUri(GRAND_CHILD_URI + "/2").build();

    IVisualizationNode root = empty()
        .addConcepts(asList(parent1, child1, grandchild1))
        .addConcepts(asList(parent2, child2, grandchild2))
        .build();

    assertThat(
        root,
        both(hasElement(hasConceptUri(equalTo(PARENT_URI)))).and(
            hasChildren(contains(both(
                hasElement(ILabelledConceptMatcher.hasConceptUri(equalTo(CHILD_URI)))).and(
                hasChildren(containsInAnyOrder(
                    both(hasElement(hasConceptUri(equalTo(GRAND_CHILD_URI + "/1")))).and(
                        hasNoChildren()),
                    both(hasElement(hasConceptUri(equalTo(GRAND_CHILD_URI + "/2")))).and(
                        hasNoChildren()))))))));
  }

  @Test
  public void removesConceptsWithSameParentAndCompatibleLanguage() throws Exception {
    IRelatedConcept parent = forConceptUri(PARENT_URI).build();
    IRelatedConcept child1 = forConceptUri(CHILD_URI).withLanguage("en").build();
    IRelatedConcept child2 = forConceptUri(CHILD_URI).withLanguage("en-us").build();
    IVisualizationNode root = empty()
        .addConcepts(asList(parent, child1))
        .addConcepts(asList(parent, child2))
        .build();

    assertThat(
        root,
        both(hasElement(equalTo(parent))).and(
            hasChildren(contains(both(hasElement(equalTo(child1))).and(hasNoChildren())))));
  }

}
