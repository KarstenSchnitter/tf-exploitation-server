package net.disy.eenvplus.tfes.modules.topmost;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.CONCEPT;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.IN_SCHEME;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.PREF_LABEL;
import static net.disy.eenvplus.tfes.modules.sparql.query.SparqlNodes.TOP_MOST_CONCEPT;
import static net.disy.eenvplus.tfes.modules.topmost.TopMostConceptSparqlQueryBuilder.createQuery;
import static org.hamcrest.Matchers.allOf;
import static org.hamcrest.Matchers.hasToString;
import static org.hamcrest.Matchers.stringContainsInOrder;
import static org.junit.Assert.assertThat;

import org.junit.Test;

import com.hp.hpl.jena.query.Query;

@SuppressWarnings("nls")
public class TopMostConceptSparqlQueryBuilderTest {

  private static final String SCHEME_LABEL = "schemeLabel";
  private static final String TOP_MOST_CONCEPT_LABEL = "conceptLabel";

  @Test
  public void emptyQuery() throws Exception {
    Query sparqlQuery = createQuery(SCHEME_LABEL, TOP_MOST_CONCEPT_LABEL).build();

    assertThat(
        sparqlQuery,
        hasToString(stringContainsInOrder(asList(
            "SELECT DISTINCT",
            CONCEPT.getName(),
            SCHEME_LABEL,
            TOP_MOST_CONCEPT.getName(),
            TOP_MOST_CONCEPT_LABEL,
            "WHERE",
            CONCEPT.getName(),
            LABEL.getUri(),
            SCHEME_LABEL,
            ";",
            TOP_MOST_CONCEPT.getUri(),
            TOP_MOST_CONCEPT.getName(),
            PREF_LABEL.getName(),
            TOP_MOST_CONCEPT_LABEL))));
  }

  @Test
  public void limit() throws Exception {
    Query sparqlQuery = createQuery(SCHEME_LABEL, TOP_MOST_CONCEPT_LABEL).withLimit(13).build();

    assertThat(sparqlQuery, hasToString(stringContainsInOrder(asList("LIMIT", "13"))));
  }

  @Test
  public void languages() throws Exception {
    Query sparqlQuery = createQuery(SCHEME_LABEL, TOP_MOST_CONCEPT_LABEL).withLanguages(
        asList("de", "en")).build();

    assertThat(
        sparqlQuery,
        hasToString(allOf(
            stringContainsInOrder(asList("FILTER", "lang", TOP_MOST_CONCEPT_LABEL, "de")),
            stringContainsInOrder(asList("FILTER", "lang", TOP_MOST_CONCEPT_LABEL, "en")))));

  }

  @Test
  public void thesauri() throws Exception {
    Query sparqlQuery = createQuery(SCHEME_LABEL, TOP_MOST_CONCEPT_LABEL).withSchemas(
        asList("dieser", "jener")).build();

    assertThat(
        sparqlQuery,
        hasToString(allOf(
            stringContainsInOrder(asList("FILTER", IN_SCHEME.getName(), "=", "dieser")),
            stringContainsInOrder(asList("FILTER", IN_SCHEME.getName(), "=", "jener")))));

  }

}
