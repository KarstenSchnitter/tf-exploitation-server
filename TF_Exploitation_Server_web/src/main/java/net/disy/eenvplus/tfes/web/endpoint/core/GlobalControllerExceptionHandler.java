//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.core;

import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.INTERNAL;
import static net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes.MISSING_PARAMETER;
import static net.disy.eenvplus.tfes.web.endpoint.core.ErrorResponseFactory.createErrorMessage;
import static net.disy.eenvplus.tfes.web.endpoint.core.ErrorResponseFactory.createResponse;
import static org.slf4j.LoggerFactory.getLogger;
import net.disy.eenvplus.tfes.core.api.exceptions.ForbiddenServiceException;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.exceptions.UnreachableServiceException;
import net.disy.eenvplus.tfes.web.api.exceptions.ErrorResponseCodes;
import net.disy.eenvplus.tfes.web.api.exceptions.IErrorResponseCode;
import net.disy.eenvplus.tfes.web.api.rest.RestApiErrorMessage;

import org.slf4j.Logger;
import org.springframework.beans.TypeMismatchException;
import org.springframework.core.annotation.AnnotationUtils;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.MissingServletRequestParameterException;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;

// NOT_PUBLISHED
@ControllerAdvice
public class GlobalControllerExceptionHandler {

  private static final Logger LOGGER = getLogger(GlobalControllerExceptionHandler.class);

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleServiceException(
      UnreachableServiceException exception) {
    LOGGER.warn("Unable to reach SPARQL endpoint."); //$NON-NLS-1$
    return createResponse(ErrorResponseCodes.LOST_CONNECTION_SPARQL);
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleServiceException(
      ForbiddenServiceException exception) {
    LOGGER.warn("Insufficient privileges to acces SPARQL endpoint."); //$NON-NLS-1$
    return createResponse(ErrorResponseCodes.UNPRIVILEGED_SPARQL);
  }

  @ExceptionHandler
  @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
  @ResponseBody
  public RestApiErrorMessage handleServiceException(ServiceException exception) {
    LOGGER.error("Received unexpected ServiceException: ", exception); //$NON-NLS-1$
    return createErrorMessage(ErrorResponseCodes.INTERNAL);
  }

  @ExceptionHandler
  @ResponseStatus(HttpStatus.BAD_REQUEST)
  @ResponseBody
  public RestApiErrorMessage handleIllegalArgumentException(IllegalArgumentException exception) {
    return createErrorMessage(ErrorResponseCodes.SYNTAX_ERROR);
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleIllegalQueryArgument(
      IllegalQueryArgumentException exception) {
    RestApiErrorMessage message = ErrorResponseFactory.createErrorMessage(exception);
    HttpStatus httpStatus = getHttpStatus(exception);
    return new ResponseEntity<RestApiErrorMessage>(message, httpStatus);
  }

  private HttpStatus getHttpStatus(IllegalQueryArgumentException exception) {
    IErrorResponseCode responseCode = exception.getResponseCode();
    return responseCode.getHttpStatus();
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleMissingKeyword(
      MissingServletRequestParameterException exception) {
    RestApiErrorMessage message = ErrorResponseFactory.createErrorMessage(
        MISSING_PARAMETER,
        exception.getParameterName());
    return new ResponseEntity<RestApiErrorMessage>(message, MISSING_PARAMETER.getHttpStatus());
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> handleIllegalQueryType(TypeMismatchException exception) {
    return createResponse(ErrorResponseCodes.UNKNOWN_VALUE, exception.getValue());
  }

  @ExceptionHandler
  public ResponseEntity<RestApiErrorMessage> defaultErrorHandler(Exception exception)
      throws Exception {
    if (isHandledBySpring(exception)) {
      throw exception;
    }

    LOGGER.error("Unexpected general exception: ", exception); //$NON-NLS-1$
    RestApiErrorMessage message = ErrorResponseFactory.createErrorMessage(INTERNAL);
    ErrorResponseFactory.appendExceptionMessage(message, exception);
    return new ResponseEntity<RestApiErrorMessage>(message, HttpStatus.INTERNAL_SERVER_ERROR);

  }

  private boolean isHandledBySpring(Exception exception) {
    return AnnotationUtils.findAnnotation(exception.getClass(), ResponseStatus.class) != null;
  }

}
