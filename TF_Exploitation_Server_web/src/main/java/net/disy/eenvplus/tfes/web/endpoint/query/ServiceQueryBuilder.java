//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.endpoint.query;

import static java.util.Arrays.asList;
import static org.apache.commons.lang3.StringUtils.split;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang3.StringUtils;

public class ServiceQueryBuilder {

  String concept;
  String keyword;
  int maxCount;
  List<String> thesauri = new ArrayList<>();
  List<String> serviceModules = new ArrayList<>();
  List<String> languages = new ArrayList<>();
  boolean crossWalkingActive;
  boolean sourceActive;
  Map<String, Object> extraParameters = new HashMap<>();

  private ServiceQueryBuilder() {
    keyword = StringUtils.EMPTY;
    maxCount = 0;
  }

  public static ServiceQueryBuilder createEmptyQuery() {
    return new ServiceQueryBuilder();
  }

  public static ServiceQueryBuilder createSuggestionQuery(String keyword) {
    return new ServiceQueryBuilder().withKeyword(keyword);
  }

  public static ServiceQueryBuilder createConceptQuery(String concept) {
    return new ServiceQueryBuilder().withConcept(concept);
  }

  public static ServiceQueryBuilder createResolveThesaurusQuery(String concept) {
    return new ServiceQueryBuilder().withConcept(concept);
  }

  public static ServiceQueryBuilder createRelativesQuery(String concept) {
    return new ServiceQueryBuilder().withConcept(concept);
  }

  public static ServiceQueryBuilder createSynonymsQuery(String concept) {
    return new ServiceQueryBuilder().withConcept(concept);
  }

  private ServiceQueryBuilder withKeyword(String keyword) {
    this.keyword = keyword;
    return this;
  }

  private ServiceQueryBuilder withConcept(String concept) {
    this.concept = concept;
    return this;
  }

  public ServiceQuery build() {
    return new ServiceQuery(this);
  }

  public ServiceQueryBuilder withMaxCount(int maxCount) {
    this.maxCount = maxCount;
    return this;
  }

  public ServiceQueryBuilder withThesauri(String thesauri) {
    this.thesauri.addAll(tokenize(thesauri));
    return this;
  }

  private List<String> tokenize(String parameters) {
    return asList(split(parameters, ','));
  }

  public ServiceQueryBuilder withServiceModules(String serviceModules) {
    this.serviceModules.addAll(tokenize(serviceModules));
    return this;
  }

  public ServiceQueryBuilder withLanguages(String languages) {
    this.languages.addAll(tokenize(languages));
    return this;
  }

  public ServiceQueryBuilder withCrossWalking(boolean active) {
    this.crossWalkingActive = active;
    return this;
  }

  public ServiceQueryBuilder withExtraParameters(String parameters) {
    String[] pairs = split(parameters, ',');
    for (String pair : pairs) {
      String[] keyValue = split(pair, ':');
      extraParameters.put(keyValue[0], keyValue[1]);
    }
    return this;
  }

  public ServiceQueryBuilder withSource(boolean active) {
    this.sourceActive = active;
    return this;
  }

  public ServiceQueryBuilder withExtraParameters(String key, Object value) {
    extraParameters.put(key, value);
    return this;
  }

}