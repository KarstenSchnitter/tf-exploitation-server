package net.disy.eenvplus.tfes.web.endpoint.controller;

import static java.util.Arrays.asList;
import static net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescriptionMatcher.hasName;
import static net.disy.eenvplus.tfes.core.api.query.IConceptQueryMatcher.hasConcept;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasExtraParameters;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasLanguages;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasMaxCount;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasServiceModules;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasThesauri;
import static net.disy.eenvplus.tfes.core.api.response.EmptyConceptDescription.EMPTY_CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SOURCE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.THESAURI;
import static net.disy.eenvplus.tfes.web.endpoint.core.OperationDescriptionMatcher.hasEndpointDescriptions;
import static net.disy.eenvplus.tfes.web.endpoint.core.OperationDescriptionMatcher.hasOnlineResource;
import static net.disy.eenvplus.tfes.web.endpoint.core.OperationDescriptionMatcher.hasRequestMethod;
import static net.disy.eenvplus.tfes.web.endpoint.core.RestEndpointDescriptionMatcher.hasParameters;
import static org.apache.commons.lang3.StringUtils.EMPTY;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.hasEntry;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.Matchers.any;
import static org.mockito.Matchers.anyString;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.times;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;
import static org.springframework.web.bind.annotation.RequestMethod.GET;

import java.util.Collections;

import net.disy.eenvplus.tfes.core.api.capabilities.ParameterDescription;
import net.disy.eenvplus.tfes.core.api.capabilities.ServiceModuleDescription;
import net.disy.eenvplus.tfes.core.api.exceptions.ServiceException;
import net.disy.eenvplus.tfes.core.api.query.IConceptQuery;
import net.disy.eenvplus.tfes.core.api.query.IDescribeConceptQuery;
import net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher;
import net.disy.eenvplus.tfes.core.api.response.IConceptDescription;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.endpoint.controller.DescribeConceptController.Json;
import net.disy.eenvplus.tfes.web.endpoint.core.OperationDescription;
import net.disy.eenvplus.tfes.web.endpoint.core.RestEndpointDescriptionMatcher;
import net.disy.eenvplus.tfes.web.validation.api.IConceptQueryValidator;

import org.hamcrest.Matcher;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.Captor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;
import org.springframework.core.env.Environment;

@RunWith(MockitoJUnitRunner.class)
@SuppressWarnings("nls")
public class DescribeConceptControllerTest {

  private static final String PATH = "Testpfad";
  private static final String TEST_SERVICE_MODUL_NAME = "Test Service Module";
  private static final ServiceModuleDescription TEST_SERVICE_MODUL = new ServiceModuleDescription(
      TEST_SERVICE_MODUL_NAME,//
      Collections.<ParameterDescription> emptyList());
  private static final String TEST_CONCEPT = "TestConcept";
  private static final int TEST_MAX_COUNT = 13;
  private static final String TEST_THESAURUS_1 = "TestThesaurus1";
  private static final String TEST_THESAURUS_2 = "TestThesaurus2";
  private static final String TEST_SERVICE_1 = "TestService1";
  private static final String TEST_SERVICE_2 = "TestService2";
  private static final String TEST_LANGUAGE_1 = "TestLanguage1";
  private static final String TEST_LANGUAGE_2 = "TestLanguage2";
  private static final String TEST_PARAM_STRING_KEY = "TestStringKey";
  private static final String TEST_PARAM_STRING_VALUE = "TestValue";
  private static final String TEST_RESPONSE = "{\"JSON\" : [\"Test\", \"Rsponse\"]}";

  @Mock
  private IServiceManager serviceManager;

  @Mock
  private Environment environment;

  @Mock
  private IConceptQueryValidator validator;

  @InjectMocks
  private DescribeConceptController describeConceptController;

  @Captor
  private ArgumentCaptor<IDescribeConceptQuery> query;

  @SuppressWarnings("unchecked")
  @Test
  public void correctDescription() {
    when(environment.getProperty(anyString())).thenReturn(PATH);
    when(serviceManager.getDescribeContextDescriptions()).thenReturn(asList(TEST_SERVICE_MODUL));

    OperationDescription operationDescription = describeConceptController.getOperationDescription();

    assertThat(operationDescription, hasOnlineResource(equalTo(PATH)));
    assertThat(operationDescription, hasRequestMethod(equalTo(GET)));
    assertThat(
        operationDescription,
        hasEndpointDescriptions(contains(RestEndpointDescriptionMatcher
            .hasServiceId(equalTo(TEST_SERVICE_MODUL_NAME)))));

    assertThat(
        operationDescription,
        hasEndpointDescriptions(contains(hasParameters(containsInAnyOrder(
            hasName(equalTo(CONCEPT)),
            hasName(equalTo(THESAURI)),
            hasName(equalTo(SERVICE)),
            hasName(equalTo(LANGUAGES)),
            hasName(equalTo(CROSS_WALKING)),
            hasName(equalTo(SOURCE)))))));
  }

  @Test
  public void createsCorrectQuery() throws ServiceException {
    when(serviceManager.describeConcept(any(IDescribeConceptQuery.class)))
        .thenReturn(EMPTY_CONCEPT);

    describeConceptController.getConceptDescription( //
        TEST_CONCEPT, //
        TEST_MAX_COUNT, //
        TEST_THESAURUS_1 + ',' + TEST_THESAURUS_2, //
        TEST_SERVICE_1 + ',' + TEST_SERVICE_2, //
        TEST_LANGUAGE_1 + ',' + TEST_LANGUAGE_2, //
        true,
        true,
        TEST_PARAM_STRING_KEY + ':' + TEST_PARAM_STRING_VALUE);

    verify(validator).validate(any(IDescribeConceptQuery.class));
    verify(serviceManager, times(1)).describeConcept(query.capture());

    IConceptQuery delegatedQuery = query.getValue();
    assertThat(delegatedQuery, hasConcept(equalTo(TEST_CONCEPT)));
    assertThat(delegatedQuery, hasMaxCount(equalTo(TEST_MAX_COUNT)));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends String>> testThesauri = containsInAnyOrder(
        equalTo(TEST_THESAURUS_1),
        equalTo(TEST_THESAURUS_2));
    assertThat(delegatedQuery, hasThesauri(testThesauri));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends String>> testModules = containsInAnyOrder(
        equalTo(TEST_SERVICE_1),
        equalTo(TEST_SERVICE_2));
    assertThat(delegatedQuery, hasServiceModules(testModules));
    @SuppressWarnings("unchecked")
    Matcher<Iterable<? extends String>> testLanguages = containsInAnyOrder(
        equalTo(TEST_LANGUAGE_1),
        equalTo(TEST_LANGUAGE_2));
    assertThat(delegatedQuery, hasLanguages(testLanguages));
    assertThat(delegatedQuery, IServiceQueryMatcher.hasCrosswalking(is(true)));
    assertThat(
        delegatedQuery,
        hasExtraParameters(hasEntry(TEST_PARAM_STRING_KEY, (Object) TEST_PARAM_STRING_VALUE)));
  }

  @Test
  public void createsCorrectResponse() throws ServiceException {
    IConceptDescription serviceResult = mock(IConceptDescription.class);
    when(serviceResult.getResponse()).thenReturn(TEST_RESPONSE);
    when(serviceManager.describeConcept(any(IDescribeConceptQuery.class)))
        .thenReturn(serviceResult);

    Json description = describeConceptController.getConceptDescription(
        TEST_CONCEPT,
        0,
        EMPTY,
        EMPTY,
        EMPTY,
        false,
        false,
        EMPTY);

    assertThat(description.value(), is(equalTo(TEST_RESPONSE)));

  }
}
