package net.disy.eenvplus.tfes.web.endpoint.controller;

import static net.disy.eenvplus.tfes.core.api.query.IConceptQueryMatcher.hasConcept;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasExtraParameters;
import static net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher.hasLanguages;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.contains;
import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.is;
import static org.junit.Assert.assertThat;
import static org.mockito.ArgumentCaptor.forClass;
import static org.mockito.Mockito.verify;
import net.disy.eenvplus.tfes.core.api.query.IConceptQuery;
import net.disy.eenvplus.tfes.core.api.query.IServiceQueryMatcher;
import net.disy.eenvplus.tfes.core.api.query.QueryParameterKeys;
import net.disy.eenvplus.tfes.core.api.service.IServiceManager;
import net.disy.eenvplus.tfes.web.validation.api.IVisualizationQueryValidator;

import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.mockito.ArgumentCaptor;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.runners.MockitoJUnitRunner;

@SuppressWarnings("nls")
@RunWith(MockitoJUnitRunner.class)
public class VisualizationControllerTest {

  @Rule
  public ExpectedException thrown = ExpectedException.none();

  @Mock
  private IServiceManager manager;

  @Mock
  private IVisualizationQueryValidator validator;

  @InjectMocks
  private VisualizationController controller;

  @Test
  public void createsCorrectQuery() throws Exception {
    ArgumentCaptor<IConceptQuery> queryCaptor = forClass(IConceptQuery.class);

    controller.getVisualization("concept", "lang1,lang2", "relation1,relation2", 3);

    verify(validator).validate(queryCaptor.capture());
    assertThat(
        queryCaptor.getValue(),
        both(hasConcept(equalTo("concept")))
            .and(hasLanguages(containsInAnyOrder("lang1", "lang2")))
            .and(
                hasExtraParameters(QueryParameterKeys.RELATIONS, contains("relation1", "relation2")))
            .and(
                IServiceQueryMatcher.hasExtraParameters(QueryParameterKeys.QUERY_DEPTH, equalTo(3))));
  }

  @Test
  public void usesSameQueryforValidationAndService() throws Exception {
    ArgumentCaptor<IConceptQuery> validationQueryCaptor = forClass(IConceptQuery.class);
    ArgumentCaptor<IConceptQuery> serviceQueryCaptor = forClass(IConceptQuery.class);

    controller.getVisualization("concept", "lang1,lang2", "relation1,relation2", null);

    verify(validator).validate(validationQueryCaptor.capture());
    verify(manager).getRelativeNeighbourhood(serviceQueryCaptor.capture());

    assertThat(validationQueryCaptor.getValue(), is(serviceQueryCaptor.getValue()));
  }

}
