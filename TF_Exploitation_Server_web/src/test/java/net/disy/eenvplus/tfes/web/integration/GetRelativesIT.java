//Copyright (c) 2014 by Disy Informationssysteme GmbH
package net.disy.eenvplus.tfes.web.integration;

import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CONCEPT;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.CROSS_WALKING;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.LANGUAGES;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SERVICE;
import static net.disy.eenvplus.tfes.web.api.core.RestMethodParameters.SOURCE;
import static org.hamcrest.Matchers.both;
import static org.hamcrest.Matchers.either;
import static org.hamcrest.Matchers.everyItem;
import static org.hamcrest.Matchers.hasItem;
import static org.hamcrest.Matchers.hasItems;
import static org.hamcrest.Matchers.hasSize;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.hamcrest.Matchers.notNullValue;
import static org.hamcrest.Matchers.startsWith;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.content;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import net.disy.eenvplus.tfes.web.api.core.RestMethodParameters;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;
import org.springframework.test.context.web.WebAppConfiguration;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.request.MockHttpServletRequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

// NOT_PUBLISHED
@RunWith(SpringJUnit4ClassRunner.class)
@WebAppConfiguration
@ContextConfiguration("testApplicationContext.xml")
@ActiveProfiles("integration-test")
@SuppressWarnings("nls")
public class GetRelativesIT {

  private static final String URI_CONCEPT_SOIL = "http://linkeddata.ge.imati.cnr.it/resource/INSPIREThemeRegister/so";
  private static final String URI_CONCEPT_REGULATIONS = "http://www.eionet.europa.eu/gemet/concept/11433";
  private static final String URI_CONCEPT_RELATED_REGULATIONS = "http://www.eionet.europa.eu/gemet/concept/11466";
  private static final String CONTENT_TYPE = "application/json;charset=UTF-8";

  @Autowired
  private WebApplicationContext context;

  private MockMvc mockMvc;

  @Value("${rest.relatives.path}")
  private String path;

  @Before
  public void createMockMvc() {
    mockMvc = MockMvcBuilders.webAppContextSetup(context).build();
  }

  @Test
  public void relativesWithoutCrossWalking() throws Exception {
    mockMvc
        .perform(getRelatives().param(CONCEPT, URI_CONCEPT_SOIL))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath("$relatives[*].relation.label", hasItems("has broader", "has narrower")))
        .andExpect(
            jsonPath(
                "$relatives[?(@.relation.label=='has broader')].keyword.title",
                hasItem("INSPIRE theme register")))
        .andExpect(
            jsonPath(
                "$relatives[?(@.relation.label=='has narrower')].keyword.title",
                hasItem("Derived Soil Profile")));
  }

  private MockHttpServletRequestBuilder getRelatives() {
    return MockMvcRequestBuilders.get("/" + path);
  }

  @Test
  public void relativesLanguagesWithoutCrossWalking() throws Exception {
    mockMvc
        .perform(getRelatives().param(CONCEPT, URI_CONCEPT_REGULATIONS).param(LANGUAGES, "en,de"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath("$relatives[*].relation.label", hasItems("has related", "has narrower")))
        .andExpect(
            jsonPath(
                "$relatives[*].keyword.language",
                everyItem(either(startsWith("en")).or(is("de")))))
        .andExpect(
            jsonPath("$relatives[?(@.keyword.conceptUri=='"
                + URI_CONCEPT_RELATED_REGULATIONS
                + "')].keyword.title", hasItems("Kodifizierung", "codification")));
  }

  @Test
  public void relativesThesauriWithoutCrossWalking() throws Exception {
    mockMvc
        .perform(
            getRelatives().param(CONCEPT, URI_CONCEPT_REGULATIONS).param(
                RestMethodParameters.THESAURI,
                "http://www.eionet.europa.eu/gemet/gemetThesaurus"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath("$relatives[*].relation.label", hasItems("has related", "has narrower")))
        .andExpect(
            jsonPath(
                "$relatives[*].keyword.conceptUri",
                everyItem(startsWith("http://www.eionet.europa.eu/gemet/"))));
  }

  @Test
  public void relativesWithSource() throws Exception {
    mockMvc
        .perform(getRelatives().param(CONCEPT, URI_CONCEPT_REGULATIONS).param(SOURCE, "true"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$relatives[*].keyword.source", notNullValue()));
  }

  @Test
  public void relativesCrossWalkingOnly() throws Exception {
    mockMvc
        .perform(
            getRelatives()
                .param(CONCEPT, URI_CONCEPT_SOIL)
                .param(CROSS_WALKING, "true")
                .param(SERVICE, "Keyword Explanation Cross Walking Module"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(
            jsonPath(
                "$relatives[*].keyword.conceptUri",
                both(not(hasItem(URI_CONCEPT_REGULATIONS)))//
                    .and(hasItem("http://linkeddata.ge.imati.cnr.it/resource/EARTh/63090"))))
        .andExpect(
            jsonPath(
                "$relatives[*].relation.label",
                both(hasItems("has broader match", "has related match", "has narrower match")).and(
                    not(hasItems("has broader", "has related", "has narrower")))));
  }

  @Test
  public void limitBothModules() throws Exception {
    mockMvc
        .perform(
            getRelatives()
                .param(CONCEPT, URI_CONCEPT_SOIL)
                .param(CROSS_WALKING, "true")
                .param(RestMethodParameters.MAX_COUNT, "4"))
        .andExpect(status().isOk())
        .andExpect(content().contentType(CONTENT_TYPE))
        .andExpect(jsonPath("$relatives", hasSize(4)));;

  }

}
